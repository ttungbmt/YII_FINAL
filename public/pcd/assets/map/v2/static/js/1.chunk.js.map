{"version":3,"sources":["../../src/publicUtils.js","../../src/utils.js","../../src/makeDefaultPluginHooks.js","../../src/hooks/useColumnVisibility.js","../../src/hooks/useTable.js","../../src/plugin-hooks/useExpanded.js","../../src/filterTypes.js","../../src/plugin-hooks/useFilters.js","../../src/plugin-hooks/useGlobalFilter.js","../../src/plugin-hooks/useGroupBy.js","../../src/plugin-hooks/useSortBy.js","../../src/plugin-hooks/usePagination.js","../../src/plugin-hooks/_UNSTABLE_usePivotColumns.js","../../src/plugin-hooks/useRowSelect.js","../../src/plugin-hooks/useRowState.js","../../src/plugin-hooks/useColumnOrder.js","../../src/plugin-hooks/useResizeColumns.js","../node_modules/react-bootstrap/esm/Table.js"],"names":["renderErr","actions","init","defaultColumn","Cell","width","minWidth","maxWidth","Number","MAX_SAFE_INTEGER","mergeProps","propList","style","next","className","props","makePropGetter","hooks","meta","userProps","handlePropGetter","prevProps","Array","prev","reduceHooks","initial","loopHooks","context","hook","ensurePluginOrder","plugins","befores","pluginName","afters","plugin","before","functionalUpdate","updater","old","useGetLatest","obj","ref","React","safeUseLayoutEffect","document","useEffect","useMountedLayoutEffect","fn","deps","mountedRef","makeRenderer","instance","column","Comp","type","console","Error","component","isReactComponent","proto","Object","isClassComponent","isFunctionComponent","includes","isExoticComponent","flexRender","linkColumnStructure","columns","parent","depth","assignColumnAccessor","flattenColumns","flattenBy","id","accessor","Header","accessorPath","row","path","def","cacheKey","JSON","pathObj","pathObjCache","flattenDeep","arr","newArr","i","d","String","makePathArray","val","cursor","e","getBy","dedupeBy","all","dd","decorateColumn","userDefaultColumn","Footer","makeHeaderGroups","allColumns","headerGroups","scanColumns","uid","getUID","headerGroup","headers","parentColumns","hasParents","latestParentColumn","newParent","originalId","placeholderOf","key","flat","recurse","expandRows","manualExpandedKey","expanded","expandSubRows","expandedRows","rows","handleRow","unpreparedAccessWarning","reOpenBracket","reCloseBracket","defaultGetTableProps","role","defaultGetTableBodyProps","defaultGetHeaderProps","colSpan","defaultGetFooterProps","totalVisibleHeaderCount","defaultGetHeaderGroupProps","defaultGetFooterGroupProps","defaultGetRowProps","defaultGetCellProps","cell","makeDefaultPluginHooks","useOptions","stateReducers","useControlledState","columnsDeps","allColumnsDeps","accessValue","materializedColumns","materializedColumnsDeps","useInstanceAfterData","visibleColumns","visibleColumnsDeps","headerGroupsDeps","useInstanceBeforeDimensions","useInstance","prepareRow","getTableProps","getTableBodyProps","getHeaderGroupProps","getFooterGroupProps","getHeaderProps","getFooterProps","getRowProps","getCellProps","useFinalInstance","useColumnVisibility","defaultGetToggleHiddenProps","onChange","checked","title","defaultGetToggleHideAllColumnsProps","indeterminate","length","reducer","state","action","previousState","hiddenColumns","subHeader","handleColumn","parentVisible","subColumn","flatHeaders","dispatch","getHooks","getInstance","allColumnsHidden","toggleHideColumn","columnId","value","setHiddenColumns","toggleHideAllColumns","getToggleHideAllColumnsProps","defaultInitialState","defaultColumnInstance","defaultReducer","prevState","defaultGetSubRows","index","defaultGetRowId","defaultUseControlledState","applyDefaults","initialState","getSubRows","getRowId","stateReducer","useTable","instanceRef","data","userColumns","getStateReducer","handler","s","reducerState","coreDataModel","flatRows","rowsById","allColumnsQueue","accessRowsForColumn","accessValueHooks","materializedColumnsQueue","visibleColumnsDep","calculateHeaderWidths","totalColumnsMinWidth","totalColumnsWidth","totalColumnsMaxWidth","left","sumTotalMinWidth","sumTotalWidth","sumTotalMaxWidth","sumTotalFlexWidth","header","subHeaders","totalMinWidth","totalWidth","totalMaxWidth","totalFlexWidth","Math","accessRow","originalRow","rowIndex","original","cells","parentRows","subRows","undefined","useExpanded","defaultGetToggleAllRowsExpandedProps","onClick","defaultGetToggleRowExpandedProps","isAllRowsExpanded","rowId","setExpanded","exists","shouldExist","paginateExpandedRows","autoResetExpanded","getAutoResetExpanded","Boolean","resetExpanded","toggleRowExpanded","toggleAllRowsExpanded","expandedDepth","maxDepth","splitId","findExpandedDepth","getToggleAllRowsExpandedProps","preExpandedRows","set","text","ids","filterValue","rowValue","exactText","exactTextCase","includesAll","exact","equals","between","min","max","temp","useRowSelect","defaultGetToggleRowSelectedProps","manualRowSelectedKey","isSomeSelected","defaultGetToggleAllRowsSelectedProps","selectedRowIds","setSelected","isAllRowsSelected","nonGroupedRowsById","selectSubRows","isSelected","newSelectedRowIds","handleRowById","autoResetSelectedRows","selectedFlatRows","getRowIsSelected","allChildrenSelected","someSelected","subRow","getAutoResetSelectedRows","resetSelectedRows","toggleAllRowsSelected","toggleRowSelected","getToggleAllRowsSelectedProps","Table","forwardRef","_ref","bsPrefix","striped","bordered","borderless","hover","size","variant","responsive","_objectWithoutPropertiesLoose","decoratedBsPrefix","useBootstrapPrefix","classes","classNames","table","createElement","_extends","responsiveClass"],"mappings":"w5BAEA,IAAIA,EAAJ,8BAEaC,EAAU,CACrBC,KAAM,QAGKC,EAAgB,CAC3BC,KAAM,uDACNC,MAF2B,IAG3BC,SAH2B,EAI3BC,SAAUC,OAAOC,kBA4BnB,SAASC,IAAwB,2BAAVC,EAAU,yBAAVA,EAAU,gBAC/B,OAAOA,EAAA,QAAgB,cAAiB,IAC9BC,EAA8BC,EADA,MACvBC,EAAuBD,EADA,UAwBtC,OArBAE,EAAQ,EAAH,QAHiC,4BAQtC,IACEA,QAAcA,aACJA,SADIA,MACoBH,GADpBG,IAAdA,GAKF,IACEA,YAAkBA,YACdA,gBADcA,EAAlBA,GAKF,KAAIA,oBACKA,EAAP,UAGF,IAxBF,I,IA2CWC,EAAiB,SAACC,EAAOC,GACpC,YADkD,IAAdA,MAAO,IACpC,4BAACC,MAAD,IACL,yBACE,qBAlBN,SAASC,EAAiBC,EAAWF,EAAWD,GAE9C,0BAAWC,EACFC,EAAiB,GAAID,EAAUE,EAAtC,IAIEC,cAAJ,GACSZ,0BAAP,IAIKA,EAAWW,EAAlB,GAOMD,CAAiBG,EAAMV,EAAM,EAAb,MAEdM,iBALD,MAWIK,EAAc,SAACP,EAAOQ,EAASP,EAAjB,mBAAiBA,MAAjB,IACzBD,EAAA,QAAa,cAUX,OATkBJ,EAAKU,EAAvB,KAFuB,IAcdG,EAAY,SAACT,EAAOU,EAAST,GAAjB,gBAAiBA,MAAjB,IACvBD,EAAA,SAAc,SAAAW,GACMA,EAAKD,EAAvB,OAWG,SAASE,EAAkBC,EAASC,EAASC,EAAYC,GAM1CH,EAAA,WAClB,SAAAI,GAAM,OAAIA,eAAJ,KAaRH,WAAgB,SAAAI,GACML,EAAA,WAClB,SAAAI,GAAM,OAAIA,eAAJ,QAYL,SAASE,EAAiBC,EAASC,GACxC,MAA0B,oBAAZD,EAAyBA,EAAhC,GAAP,EAGK,SAASE,EAAaC,GAC3B,IAAMC,EAAMC,IAAZ,SAGA,OAFAD,YAEO,iBAAkB,kBAAMA,EAAN,UAAzB,I,IAIWE,EACS,qBAAbC,SAA2BF,IAAlC,gBAA0DA,IAAMG,UAE3D,SAASC,EAAuBC,EAAIC,GACzC,IAAMC,EAAaP,YAAnB,GAEAC,GAAoB,WACdM,EAAJ,SACEF,IAEFE,WAJwB,IAA1BN,GA6CK,SAASO,EAAaC,EAAUC,EAAQlC,GAC7C,YADwD,IAAXA,MAAO,IAC7C,mBAA0B,IAAnBC,MAAY,IACxB,IAAMkC,EAAuB,kBAATC,EAAoBF,EAA3BE,GAAb,EAEA,wBAAWD,EAET,MADAE,gBACM,IAAIC,MAAV,GAGF,OAIG,SAAoBH,EAAMtC,GAC/B,OAyBwB0C,EAzBjBC,EAGT,SAA0BD,GACxB,MACuB,oBAAdA,KACJ,WACD,IAAIE,EAAQC,sBAAZ,GACA,OAAOD,aAAmBA,YAA1B,iBAFC,GAqBHE,KAdJ,SAA6BJ,GAC3B,0BAAcA,EAcZK,CADAD,IAVJ,SAA2BJ,GACzB,MACuB,kBAAdA,GAAP,kBACOA,EAAP,UACA,CAAC,aAAc,qBAAqBM,SAASN,WAH/C,aAWEO,CAHF,GA1BgC,oBAAzBN,GAAP,EAyBF,IAA0BD,EA9BfQ,CAAWZ,EAAM,EAAP,MAAsBD,UAAtB,KAAjB,KCvNG,SAASc,EAAoBC,EAASC,EAAQC,GACnD,YAD8D,IAAXA,MAAQ,GACpDF,EAAA,KAAY,SAAAf,GAYjB,OALAkB,EANAlB,EAAS,EAAH,MAEJgB,OAFI,EAGJC,WAKEjB,EAAJ,UACEA,UAAiBc,EAAoBd,EAAD,UAAyBiB,EAA7DjB,IAEF,KAIG,SAASmB,EAAeJ,GAC7B,OAAOK,EAAUL,EAAjB,WAGK,SAASG,EAAqBlB,GAAQ,IAErCqB,EAAyBrB,EAFY,GAEjCsB,EAAqBtB,EAFY,SAEvBuB,EAAWvB,EAFY,OAI3C,qBAAWsB,EAAuB,CAChCD,EAAKA,GAALA,EACA,IAAMG,EAAeF,QAArB,KACAA,EAAW,SAAAG,GAAG,OA4HX,SAAerC,EAAKsC,EAAMC,GAC/B,MACE,SAEF,IAUA,EAVMC,EAA2B,oBAATF,EAAsBA,EAAOG,eAArD,GAEMC,EACJC,UACC,WACC,IAAMD,EAwHZ,SAAuB1C,GACrB,OAcF,SAAS4C,EAAYC,EAAKC,QAAa,IAAbA,MAAS,IACjC,GAAKhE,cAAL,GAGE,IAAK,IAAIiE,EAAT,EAAgBA,EAAIF,EAApB,OAAgCE,GAAhC,EACEH,EAAYC,EAAD,GAAXD,QAHFE,UAMF,SArBEF,CAAA,QAEO,SAAAI,GAAC,OAAIC,sBAAJ,QAFR,6CADF,KAzHoBC,CAAhB,GAEA,OADAP,WACA,EAHD,GAQH,IACEQ,EAAMT,EAAA,QAAe,qBAAsBU,EAAtB,KAArBD,GACA,MAAOE,IAGT,MAAsB,qBAARF,EAAsBA,EAApC,EAjJoBG,CAAMjB,EAAV,IAOhB,IAJKJ,GAAD,kBAAcE,GAAlB,IACEF,MAGGA,GAAMrB,EAAX,QAEE,MADAG,iBACM,IAAIC,MAAV,uDAGF,MAEE,MADAD,iBACM,IAAIC,MAAV,iDAQF,OALAI,gBAAsB,CACpBa,GADoB,EAEpBC,aAGF,EAIK,SAASqB,EAASV,EAAKtC,GAC5B,MAAO,+BAEG,uBAAeiD,EAAA,WAAc,SAAAC,GAAE,OAAIlD,OAAWA,EAAf,QAA/B,KAFV,UAMK,SAASmD,EAAe9C,EAAQ+C,GACrC,MACE,MAAM,IAAN,MAUF,OARAvC,mBAEEe,OAAQ,kBAAM,oCAAN,SACRyB,OAAQ,kBAAM,oCAAN,UAHVxC,cAQA,EAIK,SAASyC,EAAiBC,EAAYnG,GAQ3C,IAPA,IAAMoG,EAAN,GAEIC,EAAJ,EAEIC,EAAJ,EACMC,EAAS,kBAAMD,KANqC,aAUxD,IAAME,EAAc,CAClBC,QAAS,IAILC,EAAN,GAEMC,EAAaN,EAAA,MAAiB,SAAAhB,GAAC,OAAIA,EAAJ,UAGrCgB,WAAoB,SAAApD,GAElB,IAEA,EAFI2D,EAAqB,uBAAzB,GAIA,KAAgB,CAEd,GAAI3D,EAAJ,OACE4D,EAAY,EAAH,GACJ5D,EADI,QAEP6D,WAAY7D,SAFL,GAGPqB,GAAOrB,SAAL,OAAyBsD,IAC3BE,QAAS,CAACxD,UAKZ4D,EAAYd,EACV,CACEe,WAHkB7D,EAAN,GAAhB,eAIIqB,GAAOrB,EAAL,mBAA8BsD,IAChCQ,cAHF,EAIEN,QAAS,CAACxD,IALd4D,GAcAD,GACAA,eAAkCC,EAFpC,WAIED,kBAEAF,UAIJF,qBAGFJ,OAhEwD,GAmExDC,KA3DKA,EAAP,QAA2B,IA8D3B,OAAOD,EAAP,UAGF,IAAMpB,EAAe,IAArB,IAiEO,SAASX,EAAUa,EAAK8B,GAC7B,IAAMC,EAAN,GAcA,OAZgB,SAAVC,EAAUhC,GACdA,WAAY,SAAAG,GACLA,EAAL,GAGE6B,EAAQ7B,EAAR6B,IAFAD,aAONC,IAEA,EAGK,SAASC,EAAW,EAApB,GAGL,IADEC,EACF,EADEA,kBAAmBC,EACrB,EADqBA,SACrB,IAD+BC,qBAC/B,SACMC,EAAN,GAiBA,OAFAC,WAbkB,SAAZC,EAAY/C,GAChBA,aACGA,YAAgBA,WAAjB,IAAqD2C,EAAS3C,EADhEA,IAGAA,YAAgBA,aAAiBA,UAAjCA,OAEA6C,UAEID,GAAiB5C,EAAjB4C,SAAgC5C,UAAhC4C,QAAsD5C,EAA1D,YACEA,wBAMJ,EAgBK,SAASgD,IACd,MAAM,IAAIrE,MAAV,mGAOF,IAAMsE,EAAN,MACMC,EAAN,MCrSA,IAAMC,EAAuB,SAAAjH,GAAK,UAChCkH,KAAM,SAD0B,IAK5BC,EAA2B,SAAAnH,GAAK,UACpCkH,KAAM,YAD8B,IAKhCE,EAAwB,SAACpH,EAAO,GAAR,IAAUqC,EAAV,mBAC5B+D,IAAK,UAAU/D,EADa,GAE5BgF,QAAShF,EAFmB,wBAG5B6E,KAAM,gBAHsB,IAOxBI,EAAwB,SAACtH,EAAO,GAAR,IAAUqC,EAAV,mBAC5B+D,IAAK,UAAU/D,EADa,GAE5BgF,QAAShF,EAAOkF,yBAFY,IAMxBC,EAA6B,SAACxH,EAAO,GAAR,UACjCoG,IAAK,eAD4B,QAEjCc,KAAM,OAF2B,IAM7BO,EAA6B,SAACzH,EAAO,GAAR,UACjCoG,IAAK,eAD4B,aAK7BsB,EAAqB,SAAC1H,EAAO,GAAR,UACzBoG,IAAK,OADoB,SAEzBc,KAAM,OAFmB,IAMrBS,EAAsB,SAAC3H,EAAO,GAAR,IAAU4H,EAAV,iBAC1BxB,IAAK,QAAQwB,MAAV,OAAyBA,SADF,GAE1BV,KAAM,QAFoB,IAMb,SAASW,IACtB,MAAO,CACLC,WADK,GAELC,cAFK,GAGLC,mBAHK,GAIL5E,QAJK,GAKL6E,YALK,GAML1C,WANK,GAOL2C,eAPK,GAQLC,YARK,GASLC,oBATK,GAULC,wBAVK,GAWLC,qBAXK,GAYLC,eAZK,GAaLC,mBAbK,GAcLhD,aAdK,GAeLiD,iBAfK,GAgBLC,4BAhBK,GAiBLC,YAjBK,GAkBLC,WAlBK,GAmBLC,cAAe,CAnBV,GAoBLC,kBAAmB,CApBd,GAqBLC,oBAAqB,CArBhB,GAsBLC,oBAAqB,CAtBhB,GAuBLC,eAAgB,CAvBX,GAwBLC,eAAgB,CAxBX,GAyBLC,YAAa,CAzBR,GA0BLC,aAAc,CA1BT,GA2BLC,iBAAkB,ICjEtBnK,0CACAA,sCACAA,sCACAA,8CAEO,IAAMoK,EAAsB,SAAApJ,GACjCA,uBAA6B,CAA7BA,GACAA,+BAAqC,CAArCA,GAEAA,wBACAA,sCACAA,yBAA4B,kBAASkC,EAAT,8BAE1BA,QAF0B,mBAI5BlC,uBAGFoJ,mCAEA,IAAMC,EAA8B,SAACvJ,EAAO,GAAR,IAAUqC,EAAV,eAAuB,CAAC,EAE1D,CACEmH,SAAU,SAAA1E,GACRzC,gBAAqByC,SAArBzC,UAEFxC,MAAO,CACLgF,OAAQ,WAEV4E,QAASpH,EAPX,UAQEqH,MAAO,2BAILC,EAAsC,SAAC3J,EAAO,GAAR,IAAUoC,EAAV,iBAAyB,CAAC,EAEpE,CACEoH,SAAU,SAAA1E,GACR1C,wBAA+B0C,SAA/B1C,UAEFvC,MAAO,CACLgF,OAAQ,WAEV4E,SAAUrH,EAAD,mBAA+BA,sBAP1C,OAQEsH,MARF,4BASEE,eACGxH,EAAD,kBAA8BA,sBAA6ByH,UAIjE,SAASC,EAAQC,EAAOC,EAAQC,EAAe7H,GAC7C,GAAI4H,SAAgB9K,EAApB,KACE,UACEgL,cAAe,IADjB,GAMF,GAAIF,SAAgB9K,EAApB,mBACE,eAEEgL,cAAe9H,8BAAuC,KAI1D,GAAI4H,SAAgB9K,EAApB,iBAA8C,CAC5C,IAKMgL,GAJJ,qBAAOF,EAAP,MACIA,EADJ,OAEKD,yBAA6BC,EAHpC,WAK4B,UACpBD,EADoB,eACCC,EADD,WAExBD,EAAA,sBAA2B,SAAAtF,GAAC,OAAIA,IAAMuF,EAAV,YAEhC,eAEEE,kBAIJ,OAAIF,SAAgB9K,EAApB,iBACE,QAEEgL,cAAe7I,EAAiB2I,EAAD,MAAeD,EAAf,iBAI/BC,SAAgB9K,EAApB,qBAME,QAEEgL,eANA,qBAAOF,EAAP,MACIA,EADJ,OAEKD,gBAHP,QAO6B3H,EAAA,gBAAwB,SAAAqC,GAAC,OAAIA,EAAJ,MAAY,UARpE,EAaF,SAASiE,EAA4BtG,GAAU,IAE3CyD,EAEEzD,EAJyC,QAGlC8H,EACP9H,EAJyC,oBAMxBT,YAArB,GAEA,QAGA,IAmBI4F,EAAJ,EAEA1B,WACE,SAAAsE,GAAS,OAAK5C,GAtBK,SAAf6C,EAAgB/H,EAAQgI,GAC5BhI,YAAmBgI,IAAkBH,WAAuB7H,EAA5DA,IAEA,IAAIkF,EAAJ,EAaA,OAXIlF,WAAkBA,UAAtB,OACEA,mBACE,SAAAiI,GAAS,OACN/C,GAA2B6C,EAAaE,EAAWjI,EAD7C,cAIXkF,EAA0BlF,cAA1BkF,EAGFlF,4BAEA,EAMyC+H,CAAaD,GAA7C,MAIb,SAASxB,EAAYvG,GAAU,IAE3BmI,EAKEnI,EAPyB,YAG3BoI,EAIEpI,EAPyB,SAI3BmD,EAGEnD,EAPyB,WAK3BqI,EAEErI,EAPyB,SAMlB8H,EACP9H,EAPyB,oBASvBsI,EAAclJ,EAApB,GAEMmJ,EAAmBpF,WAAsB2E,EAA/C,OAEMU,EAAmB,iBACvB,qBACEJ,EAAS,CAAEjI,KAAMrD,EAAR,iBAAkC2L,SAAlC,EAA4CC,YACvD,CAHF,IAMMC,EAAmB,iBACvB,SAAAD,GAAK,OAAIN,EAAS,CAAEjI,KAAMrD,EAAR,iBAAkC4L,YACpD,CAFF,IAKME,EAAuB,iBAC3B,SAAAF,GAAK,OAAIN,EAAS,CAAEjI,KAAMrD,EAAR,qBAAsC4L,YACxD,CAFF,IAKMG,EAA+BhL,EACnCwK,IADiD,6BAEjD,CAAErI,SAAUsI,MAGdH,WAAoB,SAAAlI,GAClBA,eAAsB,SAAAyI,GACpBN,EAAS,CACPjI,KAAMrD,EADC,iBAEP2L,SAAUxI,EAFH,GAGPyI,WAIJzI,uBAA8BpC,EAC5BwK,IAD0C,qBAE1C,CACErI,SAAUsI,IACVrI,cAKNQ,gBAAwB,CACtB8H,iBADsB,EAEtBC,iBAFsB,EAGtBG,iBAHsB,EAItBC,qBAJsB,EAKtBC,iCCjLJ,IAAMC,EAAN,GACMC,EAAN,GACMC,EAAiB,SAACrB,EAAOC,EAAQqB,GAAhB,UACjBC,EAAoB,SAACxH,EAAKyH,GAAN,OAAgBzH,WAAhB,IACpB0H,EAAkB,SAAC1H,EAAKyH,EAAOlI,GAAb,UACnBA,EAAS,CAACA,EAAD,WAAH,KADa,IAElBoI,EAA4B,SAAAhH,GAAC,UAEnC,SAASiH,GAAc1L,GAAO,MASxBA,EATwB,aAE1B2L,OAF0B,YASxB3L,EATwB,cAG1BZ,OAH0B,YASxBY,EATwB,WAI1B4L,OAJ0B,YASxB5L,EATwB,SAK1B6L,OAL0B,YASxB7L,EATwB,aAM1B8L,OAN0B,YASxB9L,EATwB,mBAO1BgI,OAP0B,UAW5B,YAX4B,kGAW5B,CAEE2D,aAFF,EAGEvM,cAHF,EAIEwM,WAJF,EAKEC,SALF,EAMEC,aANF,EAOE9D,uBAIJ,IAAa+D,GAAW,SAAC/L,GAAsB,2BAAZe,EAAY,iCAAZA,EAAY,kBAE7Cf,EAAQ0L,GAFqC,GAK7C3K,EAAU,CAACuI,GAAJ,OALsC,GAQ7C,IAAI0C,EAAcrK,WAR2B,IAWvC+I,EAAclJ,EAAawK,EAXY,SAc7CnJ,cAAc6H,IAAd7H,QAEE9B,QAFF8B,EAGE3C,MAAO2H,OAIT9G,2BAAgC,SAAAI,GAC9BA,EAAOuJ,IAAPvJ,UAIF,IAAMsJ,EAAWjJ,EAAakJ,IAA9B,OACAA,sBACOA,IA5BsC,MA+B7C7H,cACE6H,IACAjK,EAAYgK,IAAD,WAAwBiB,GAFrC7I,KA/B6C,MA6CzC6H,IARFuB,EArC2C,OAsClCC,EAtCkC,UAuC3CP,EAvC2C,eAwC3CvM,EAxC2C,gBAyC3CwM,EAzC2C,aA0C3CC,EA1C2C,WA2C3CC,EA3C2C,eA4C3C9D,EA5C2C,qBAgDvCmE,EAAkB3K,EAhDqB,GAmDvCsI,EAAU,iBACd,cAEE,IAAKE,EAAL,KAEE,MADAxH,aAAa,CAAEwH,WACT,IAAIvH,MAAV,+BAIF,MAAO,UACFgI,IADE,cAGDlK,cAAc4L,KACdA,IACA,CAACA,MALA,QAOL,qBAAgBC,EAAQC,EAAGrC,EAAQD,EAAOW,MAA1C,IAPF,KAWF,CAACD,EAAU0B,EAvEgC,MA2EZ,yBAAqC,kBACpErC,EAAQ6B,EAAc,CAAEpJ,KAAMrD,EAAQC,UADjCmN,EA3EsC,KA2ExB9B,EA3EwB,KAgFvCT,EAAQtJ,EAAY,GAAD,OACnBgK,IADmB,0BAGvB,CAAErI,SAAUsI,MAGd7H,cAAc6H,IAAe,CAC3BX,MAD2B,EAE3BS,aAIF,IAAMpH,EAAU,aACd,kBACED,EACE1C,EAAYgK,IAAD,UAAkC,CAC3CrI,SAAUsI,SAJF,eAYTjK,EAAYgK,IAAD,eAA6B,CAAErI,SAAUsI,QAG3DA,YA3G6C,EA+G7C,IAAInF,EAAa,aACf,kBACE9E,EAAYgK,IAAD,WAAwBjH,EAAxB,GAAiD,CAC1DpB,SAAUsI,MADZ,IADF,KADe,eAUVjK,EAAYgK,IAAD,kBAAgC,CAC5CrI,SAAUsI,QAIhBA,eA9H6C,EAiI7C,IAAM6B,EAAgB,aAAc,WAOlC,IANA,IAAI3F,EAAJ,GACI4F,EAAJ,GACMC,EAAN,GAEMC,EAAkB,GAAH,OAArB,GAEOA,EAAP,QAA+B,CAC7B,IAAMrK,EAASqK,EAAf,QACAC,GAAoB,CAClBV,KADkB,EAElBrF,KAFkB,EAGlB4F,SAHkB,EAIlBC,SAJkB,EAKlBpK,OALkB,EAMlBwJ,SANkB,EAOlBD,WAPkB,EAQlBgB,iBAAkBnC,IARA,YASlBC,gBAIJ,MAAO,CAAE9D,KAAF,EAAQ4F,SAAR,EAAkBC,cACxB,CAAClH,EAAY0G,EAAMJ,EAAUD,EAAYnB,EAxJC,MA2JW,aAAc,WAAM,IAClE7D,EAA6B2F,EADqC,KAC5DC,EAAuBD,EADqC,SAClDE,EAAaF,EADqC,SAEpEnE,EAAsB3H,EAC1BgK,IADqC,uBAGrC,CACErI,SAAUsI,MAIdtC,WAA4B,SAAA3D,GAAC,OAAIlB,EAAJ,MAI7B,IAFA,IAAMsJ,EAA2B,GAAH,OAA9B,GAEOA,EAAP,QAAwC,CACtC,IAAMxK,EAASwK,EAAf,QACAF,GAAoB,CAClBV,KADkB,EAElBrF,KAFkB,EAGlB4F,SAHkB,EAIlBC,SAJkB,EAKlBpK,OALkB,EAMlBwJ,SANkB,EAOlBD,WAPkB,EAQlBgB,iBAAkBnC,IARA,YASlBC,gBAIJ,MAAO,CAAC9D,EAAM4F,EAAUC,EAAxB,KA7BsD,qBAsCnDhM,EAAYgK,IAAD,2BAAyC,CACrDrI,SAAUsI,QAvCP9D,EA3JsC,KA2JhC4F,EA3JgC,KA2JtBC,EA3JsB,KA2JZrE,EA3JY,KAsM7CvF,cAAc6H,IAAe,CAC3B9D,KAD2B,EAE3B4F,SAF2B,EAG3BC,SAH2B,EAI3BrE,wBAGFzH,EAAU8J,IAAD,qBAAkCC,KAG3CnF,EAAa,aACX,kBAAMP,EAAS,GAAD,aAA0C,SAAAP,GAAC,OAAIA,EAAJ,QACzD,CAACc,EAFHA,IAIAmF,eApN6C,EAyN7C,IAAInC,EAAiB,aACnB,kBACE9H,EAAYgK,IAAD,iBAAwC,CACjDrI,SAAUsI,MADZ,KAEO,SAAAjG,GAAC,OAAIU,EAAeV,EAAnB,QAJS,iBAWdhE,EAAYgK,IAAD,sBAAoC,CAChDrI,SAAUsI,QAMhBnF,EAAa,aACX,kBAAMP,EAAS,GAAD,aAAqC,SAAAP,GAAC,OAAIA,EAAJ,QACpD,CAACc,EAFHA,IAIAmF,eA/O6C,EAkP7C,IAAMlF,EAAe,aACnB,kBACE/E,EACEgK,IADS,aAETnF,EAAiBiD,EAFR,GAGTmC,OALe,iBAadjK,EAAYgK,IAAD,oBAAkC,CAC9CrI,SAAUsI,QAIhBA,iBApQ6C,EAuQ7C,IAAM7E,EAAU,aACd,kBAAOL,SAAsBA,KAAtBA,QAAP,KACA,CAFF,IAIAkF,YA3Q6C,EA8Q7CA,gBAA4BlF,EAAA,QAC1B,gCAAkCI,EAAlC,WADF8E,IAKA/J,EAAU8J,IAAD,4BAAyCC,KAGlD,IAAMoC,EAAoBvE,EAAA,QAChB,SAAA9D,GAAC,OAAIA,EAAJ,aADe,KAEnB,SAAAA,GAAC,OAAIA,EAAJ,MAFkB,YAA1B,KAMA8D,EAAiB,aACf,kBAAMA,EAAA,QAAsB,SAAA9D,GAAC,OAAIA,EAAJ,eAE7B,GAHF8D,IAKAmC,mBAjS6C,QAwSzCqC,GAxSyC,GAqS3CC,EArS2C,KAsS3CC,EAtS2C,KAuS3CC,EAvS2C,KAma7C,OAzHAxC,2BACAA,wBACAA,2BAEA/J,EAAU8J,IAAD,YAAyBC,KAIjC,UAAIA,IAAJ,YAAkCA,IAAlC,qBACC,SAAArI,GAEEA,SAAgBF,EAAauI,IAFrB,GAKRrI,iBAAwBpC,EAAewK,IAAD,eAA4B,CAChErI,SAAUsI,IACVrI,WAIFA,iBAAwBpC,EAAewK,IAAD,eAA4B,CAChErI,SAAUsI,IACVrI,cAKNqI,iBAA6BA,IAAA,qBAC3B,cAiBE,OAfA9E,UAAsBA,EAAA,gBAA2B,SAAAvD,GAQ/C,OAAIA,EAAJ,QAPgB,SAAViE,EAAUT,GAAO,OACrBA,EAAA,QAAe,SAAAxD,GACb,OAAIA,EAAJ,QACSiE,EAAQjE,EAAf,SAEKA,EAAP,aALmB,OAQdiE,CAAQjE,EAAf,SAEKA,EAAP,eAIEuD,UAAJ,SACEA,sBAAkC3F,EAChCwK,IAD8C,oBAE9C,CAAErI,SAAUsI,IAAe9E,YAA3B,EAAwC2F,MAAO/G,IAGjDoB,sBAAkC3F,EAChCwK,IAD8C,oBAE9C,CAAErI,SAAUsI,IAAe9E,YAA3B,EAAwC2F,MAAO/G,KAGjD,MAONkG,iBAA6B,UAAIA,IAAJ,cAzWgB,UA8W7CA,eAA2B,iBACzB,SAAA5G,GACEA,cAAkB7D,EAAewK,IAAD,YAAyB,CACvDrI,SAAUsI,IACV5G,QAIFA,WAAeyB,EAAA,KAAe,SAAAlD,GAC5B,IAAMuF,EAAO,CACXvF,OADW,EAEXyB,IAFW,EAGXgH,MAAOhH,SAAWzB,EAAXyB,KAeT,OAXA8D,eAAoB3H,EAAewK,IAAD,aAA0B,CAC1DrI,SAAUsI,IACV9C,SAIFA,SAAczF,EAAauI,IAAD,EAAwB,CAChD5G,IADgD,EAEhD8D,SAGF,KAGF9D,QAAYyE,EAAA,KAAmB,SAAAlG,GAAM,OACnCyB,EAAA,eAAkB,SAAA8D,GAAI,OAAIA,cAAmBvF,EAAvB,SAIxB1B,EAAU8J,IAAD,aAA6B,CAAErI,SAAUsI,QAEpD,CAACD,EAAUC,EAAanF,EArC1BmF,IAwCAA,kBAA8BzK,EAAewK,IAAD,cAA2B,CACrErI,SAAUsI,MAGZA,sBAAkCzK,EAChCwK,IAD8C,kBAE9C,CACErI,SAAUsI,MAId/J,EAAU8J,IAAD,iBAA8BC,KAEhCA,KAGT,SAASqC,GAAsBlH,EAASsH,QAAU,IAAVA,MAAO,GAC7C,IAAIC,EAAJ,EACIC,EAAJ,EACIC,EAAJ,EACIC,EAAJ,EAoCA,OAlCA1H,WAAgB,SAAA2H,GAAU,IACTC,EAAeD,EADN,QAKxB,GAFAA,cAEIC,GAAcA,EAAlB,OAAqC,OAM/BV,GAAsBU,EANS,GAEjCC,EAFiC,KAGjCC,EAHiC,KAIjCC,EAJiC,KAKjCC,EALiC,KAOnCL,kBACAA,eACAA,kBACAA,wBAEAA,gBAAuBA,EAAvBA,SACAA,aAAoBM,SAClBA,SAASN,EAATM,SAA0BN,EADRM,OAElBN,EAFFA,UAIAA,gBAAuBA,EAAvBA,SACAA,iBAAwBA,YAAmBA,EAAnBA,WAAxBA,EAEEA,EAAJ,YACEL,GAAQK,EAARL,WACAC,GAAoBI,EAApBJ,cACAC,GAAiBG,EAAjBH,WACAC,GAAoBE,EAApBF,cACAC,GAAqBC,EAArBD,mBAIG,CAACH,EAAkBC,EAAeC,EAAzC,GAGF,SAASX,GAAoB,GAU1B,IATDV,EASC,EATDA,KACArF,EAQC,EARDA,KACA4F,EAOC,EAPDA,SACAC,EAMC,EANDA,SACApK,EAKC,EALDA,OACAwJ,EAIC,EAJDA,SACAD,EAGC,EAHDA,WACAgB,EAEC,EAFDA,iBACAlC,EACC,EADDA,YA6EAuB,WAAa,qBAxEK,SAAZ8B,EAAaC,EAAaC,EAAU3K,EAAxB,UAA0D,IAAlCA,MAAQ,GAEhD,IAAM4K,EAAN,EAEMxK,EAAKmI,EAASmC,EAAaC,EAAjC,GAEInK,EAAM2I,EANgE,GAS1E,KAsCW3I,EAAJ,SAILA,2BAA4B,qBAAUiK,EAAUtJ,EAAGD,EAAGlB,EAAP,EAAnB,WAZ5B,IA7BAQ,EAAM,CACJJ,GADI,EAEJwK,SAFI,EAGJ3C,MAHI,EAIJjI,MAJI,EAKJ6K,MAAO,CALH,MAUNrK,YACAA,iBACAA,kBACAA,wBAdQ,EAiBRA,SAjBQ,GAoBRsK,OApBQ,GAsBR5B,OAtBQ,GAwBRC,KAxBQ,EA2BR3I,kBAAsB8H,EAAWoC,EA3BzB,GA8BJlK,EAAJ,gBAAyB,CACvB,IAAMuK,EAAN,GACAvK,2BAA4B,qBAC1BiK,EAAUtJ,EAAGD,EAAGlB,EAAP,IADiB,MAI5BQ,YAUAzB,EAAJ,WACEyB,SAAWzB,EAAXyB,IAAwBzB,eAAxByB,IAIFA,SAAWzB,EAAXyB,IAAwBrD,EAAY,EAElCqD,SAAWzB,EAFsB,IAGjC,CACEyB,IADF,EAEEzB,OAFF,EAGED,SAAUsI,MANd5G,GAaAiK,CAAUC,EAAaC,EAAU,OAAGK,EADzB,MCnlBfpP,gCACAA,wCACAA,gDAEA,IAAaqP,GAAc,SAAArO,GACzBA,gCAAsC,CAAtCA,IACAA,4BAAkC,CAAlCA,IACAA,yBACAA,uBACAA,uBAGFqO,4BAEA,IAAMC,GAAuC,SAACxO,EAAO,GAAR,IAAUoC,EAAV,iBAAyB,CAAC,EAErE,CACEqM,QAAS,SAAA3J,GACP1C,2BAEFvC,MAAO,CACLgF,OAAQ,WAEV6E,MAAO,8BAILgF,GAAmC,SAAC1O,EAAO,GAAR,IAAU8D,EAAV,YAAoB,CAAC,EAE5D,CACE2K,QAAS,WACP3K,uBAEFjE,MAAO,CACLgF,OAAQ,WAEV6E,MAAO,yBAKX,SAAS,GAAT,SACE,GAAIM,SAAgB9K,EAApB,KACE,UACEuH,SAAU,IADZ,GAMF,GAAIuD,SAAgB9K,EAApB,cACE,eAEEuH,SAAUrE,yBAAkC,KAIhD,GAAI4H,SAAgB9K,EAApB,sBAAmD,KACzC4L,EAAUd,EAD+B,MAEzC2E,EAAgCvM,EAFS,kBAEtBqK,EAAarK,EAFS,SAMjD,GAFmC,qBAAV0I,EAAwBA,GAAjD,EAEe,CACb,IAAMrE,EAAN,GAMA,OAJA5D,wBAA8B,SAAA+L,GAC5BnI,WAGF,QAEEA,aAIJ,eAEEA,SAAU,KAId,GAAIuD,SAAgB9K,EAApB,kBAA+C,KAOjB,EANpBwE,EAA2BsG,EADU,GAC1B6E,EAAgB7E,EADU,MAEvC8E,EAAS/E,WAAf,GAEMgF,EACmB,qBAAhBF,EAA8BA,GADvC,EAGA,IAAKC,GAAL,EACE,eAEErI,SAAU,EAAF,GACHsD,EADG,6BAKL,GAAI+E,IAAJ,EAA4B,OACJ/E,EADI,cAEjC,eAEEtD,SAJ+B,kBAOjC,UAKN,SAAS,GAAT,GAA+B,IAE3BwF,EAWE7J,EAbyB,KAG3BwE,EAUExE,EAbyB,KAI3BqK,EASErK,EAbyB,WAazBA,EAbyB,kBAK3BoE,OAL2B,qBAazBpE,EAbyB,qBAM3B4M,OAN2B,WAazB5M,EAbyB,cAO3BsE,OAP2B,WAazBtE,EAbyB,kBAQ3B6M,OAR2B,SAS3BxE,EAIErI,EAbyB,SAU3BrB,EAGEqB,EAbyB,QAWlBqE,EAEPrE,EAbyB,eAY3BoI,EACEpI,EAbyB,SAe7BtB,EAAkB,EAEhB,CAAC,YAAa,aAAc,kBAFb,mBAAjBA,eAMA,IAAMoO,EAAuB1N,EAA7B,GAEImN,EAAoBQ,QACtBtM,uBAAgCA,eADlC,QAIA,GACMA,OAAA,cAA2B,SAAAa,GAAE,OAAK+C,EAAL,QAC/BkI,MAKJ5M,GAAuB,WACjBmN,KACF1E,EAAS,CAAEjI,KAAMrD,EAAQkQ,kBAE1B,CAAC5E,EAJJzI,IAMA,IAAMsN,EAAoB,iBACxB,cACE7E,EAAS,CAAEjI,KAAMrD,EAAR,kBAAmCwE,GAAnC,EAAuCoH,YAElD,CAJF,IAOMwE,EAAwB,iBAC5B,SAAAxE,GAAK,OAAIN,EAAS,CAAEjI,KAAMrD,EAAR,sBAAuC4L,YACzD,CAFF,IAKMnE,EAAe,aAAc,WACjC,SACSJ,EAAWK,EAAM,CAAEJ,kBAAF,EAAqBC,SAArB,EAA+BC,kBAGzD,IACC,CAACsI,EAAsBpI,EAAMJ,EAAmBC,EANnD,IAQM8I,EAAgB,aAAc,kBAmCtC,SAA2B9I,GACzB,IAAI+I,EAAJ,EAOA,OALA3M,wBAA8B,SAAAa,GAC5B,IAAM+L,EAAU/L,QAAhB,KACA8L,EAAW1B,WAAmB2B,EAA9BD,WAGF,EA3C0CE,CAAN,KAAmC,CAAvE,IAIMhF,EAAclJ,EAApB,GAEMmO,EAAgC1P,EACpCwK,IADkD,8BAElD,CAAErI,SAAUsI,MAGd7H,gBAAwB,CACtB+M,gBADsB,EAEtBjJ,aAFsB,EAGtBC,KAHsB,EAItB2I,cAJsB,EAKtBZ,kBALsB,EAMtBU,kBANsB,EAOtBC,sBAPsB,EAQtBK,kCAIJ,SAAS/G,GAAW9E,EAAK,GAAsC,IAAxB2G,EAAwB,EAApCrI,SAAYqI,SAAYrI,EAAY,EAAZA,SACjD0B,oBAAwB,SAAA+L,GAAG,OAAIzN,oBAA2B0B,EAA3B1B,GAAJ,IAE3B0B,4BAAgC7D,EAC9BwK,IAD4C,0BAE5C,CACErI,SADF,EAEE0B,QCnNC,IAAMgM,GAAO,SAAClJ,EAAMmJ,EAAKC,GAS9B,OARApJ,EAAOA,EAAA,QAAY,SAAA9C,GACjB,OAAOiM,EAAA,MAAS,SAAArM,GACd,IAAMuM,EAAWnM,SAAjB,GACA,OAAOY,iCAEKA,UAFZ,sBAQNoL,cAAkB,SAAAlL,GAAG,UAEd,IAAMsL,GAAY,SAACtJ,EAAMmJ,EAAKC,GACnC,OAAOpJ,EAAA,QAAY,SAAA9C,GACjB,OAAOiM,EAAA,MAAS,SAAArM,GACd,IAAMuM,EAAWnM,SAAjB,GACA,YAAOmM,OACHvL,0BAAmCA,UADhCuL,qBAObC,cAAuB,SAAAtL,GAAG,UAEnB,IAAMuL,GAAgB,SAACvJ,EAAMmJ,EAAKC,GACvC,OAAOpJ,EAAA,QAAY,SAAA9C,GACjB,OAAOiM,EAAA,MAAS,SAAArM,GACd,IAAMuM,EAAWnM,SAAjB,GACA,YAAOmM,OACHvL,YAAqBA,OADlBuL,UAObE,cAA2B,SAAAvL,GAAG,UAEvB,IAAM5B,GAAW,SAAC4D,EAAMmJ,EAAKC,GAClC,OAAOpJ,EAAA,QAAY,SAAA9C,GACjB,OAAOiM,EAAA,MAAS,SAAArM,GACd,IAAMuM,EAAWnM,SAAjB,GACA,OAAOkM,WAAP,UAKNhN,cAAsB,SAAA4B,GAAG,OAAKA,IAAQA,EAAb,QAElB,IAAMwL,GAAc,SAACxJ,EAAMmJ,EAAKC,GACrC,OAAOpJ,EAAA,QAAY,SAAA9C,GACjB,OAAOiM,EAAA,MAAS,SAAArM,GACd,IAAMuM,EAAWnM,SAAjB,GACA,OACEmM,GACAA,EADAA,QAEAD,EAAA,OAAkB,SAAApL,GAAG,OAAIqL,WAAJ,aAM7BG,cAAyB,SAAAxL,GAAG,OAAKA,IAAQA,EAAb,QAErB,IAAMyL,GAAQ,SAACzJ,EAAMmJ,EAAKC,GAC/B,OAAOpJ,EAAA,QAAY,SAAA9C,GACjB,OAAOiM,EAAA,MAAS,SAAArM,GAEd,OADiBI,SAAjB,KACA,SAKNuM,cAAmB,SAAAzL,GAAG,2BAAWA,GAE1B,IAAM0L,GAAS,SAAC1J,EAAMmJ,EAAKC,GAChC,OAAOpJ,EAAA,QAAY,SAAA9C,GACjB,OAAOiM,EAAA,MAAS,SAAArM,GAGd,OAFiBI,SADG,IAGpB,SAKNwM,cAAoB,SAAA1L,GAAG,aAAIA,GAEpB,IAAM2L,GAAU,SAAC3J,EAAMmJ,EAAKC,GAAgB,MAChCA,GADgC,GAC5CQ,EAD4C,KACvCC,EADuC,KAMjD,IAHAD,EAAqB,kBAARA,EAAmBA,GAAhCA,MACAC,EAAqB,kBAARA,EAAmBA,EAAhCA,KAEe,CACb,IAAMC,EAAN,EACAF,IACAC,IAGF,OAAO7J,EAAA,QAAY,SAAA9C,GACjB,OAAOiM,EAAA,MAAS,SAAArM,GACd,IAAMuM,EAAWnM,SAAjB,GACA,OAAOmM,MAAmBA,GAA1B,SAKNM,cAAqB,SAAA3L,GAAG,OACrBA,GAAQ,kBAAOA,EAAP,IADa,kBACwBA,EAAP,IC5FzC1F,8BACAA,wBACAA,gCCNAA,wCACAA,oCCIAA,8BACAA,gCCHAA,4BACAA,8BACAA,4BAEAE,0BACAA,mBCLAF,wBACAA,sBACAA,4BCNAA,0BACAA,4BCDAA,wCACAA,gDACAA,wCAEA,IAAayR,GAAe,SAAAzQ,GAC1BA,4BAAkC,CAAlCA,IACAA,gCAAsC,CAAtCA,IACAA,yBACAA,uBACAA,uBAGFyQ,cAfA,eAiBA,IAAMC,GAAmC,SAAC5Q,EAAO,GAAsB,IAApBoC,EAAoB,EAApBA,SAAU0B,EAAU,EAAVA,IAAU,EACrB1B,EADqB,qBAC7DyO,OAD6D,qBAUrE,MAAO,CAAC,EAEN,CACErH,SAAU,SAAA1E,GACRhB,oBAAsBgB,SAAtBhB,UAEFjE,MAAO,CACLgF,OAAQ,WAEV4E,WAfA3F,aAAgBA,WAApB,KAGYA,EAAV2F,WAaEC,MARF,sBASEE,cAAe9F,EAAIgN,kBAKnBC,GAAuC,SAAC/Q,EAAO,GAAR,IAAUoC,EAAV,iBAAyB,CAAC,EAErE,CACEoH,SAAU,SAAA1E,GACR1C,wBAA+B0C,SAA/B1C,UAEFvC,MAAO,CACLgF,OAAQ,WAEV4E,QAASrH,EAPX,kBAQEsH,MARF,2BASEE,cAAeuF,SACZ/M,EAAD,mBACES,YAAYT,QAAZS,gBAFkB,WAO1B,SAAS,GAAT,SACE,GAAImH,SAAgB9K,EAApB,KACE,UACE8R,eAAgB,IADlB,GAMF,GAAIhH,SAAgB9K,EAApB,kBACE,eAEE8R,eAAgB5O,+BAAwC,KAI5D,GAAI4H,SAAgB9K,EAApB,sBAAmD,KAClC+R,EAAgBjH,EADkB,MAG/CkH,EAGE9O,EAN6C,kBAI/CqK,EAEErK,EAN6C,WAM7CA,EAN6C,mBAK/C+O,OAL+C,UAWjD,GAFyB,qBAAhBF,EAA8BA,GADvC,EAGe,CACb,IAAMD,EAAN,GAMA,OAJAnO,wBAAwC,SAAA+L,GACtCoC,WAGF,QAEEA,mBAIJ,eAEEA,eAAgB,KAIpB,GAAIhH,SAAgB9K,EAApB,kBAA+C,KACrCwE,EAA2BsG,EADU,GAC1BiH,EAAgBjH,EADU,MAErCyC,EAAmCrK,EAFE,WAEFA,EAFE,cAE3BgP,OAF2B,SAQvCC,EADM5E,EAAZ,GACA,WACMsC,EACJ,qBAAO,EAAP,GADF,EAGA,GAAIsC,IAAJ,EACE,SAGF,IAAIC,EAAoB,EAAH,GAAQvH,EAA7B,gBAoBA,OAlBsB,SAAhBwH,EAAgB7N,GACpB,IAAMI,EAAM2I,EAAZ,GAUA,GARK3I,EAAL,aACOuN,GAAL,EACEC,QACSD,IAAJ,UACEC,EAAP,IAIAF,GAAiBtN,EAArB,QACE,OAAOA,EAAA,iBAAoB,SAAAA,GAAG,OAAIyN,EAAczN,EAAlB,OAIlCyN,IAEA,QAEEP,eAAgBM,KAKtB,SAAS,GAAT,GAA+B,IAE3BrF,EAUE7J,EAZyB,KAG3BwE,EASExE,EAZyB,KAI3BqI,EAQErI,EAZyB,SAK3BrB,EAOEqB,EAZyB,QAM3BqK,EAMErK,EAZyB,WAYzBA,EAZyB,mBAO3B+O,OAP2B,YAYzB/O,EAZyB,sBAQ3BoP,OAR2B,SASlBR,EAGP5O,EAZyB,uBAYzBA,EAZyB,cAU3BgP,OAV2B,SAW3B5G,EACEpI,EAZyB,SAc7BtB,EAAkB,EAEhB,CAAC,aAAc,aAFA,aAAjBA,gBAMA,IAAM2Q,EAAmB,aAAc,WACrC,IAAMA,EAAN,GAcA,OAZA7K,WAAa,SAAA9C,GACX,IAAMuN,EAAaD,EAmEzB,SAASM,EAAiB5N,EAAKkN,GAC7B,GAAIA,EAAelN,EAAnB,IACE,SAGF,GAAIA,WAAeA,UAAnB,OAAuC,CACrC,IAAI6N,GAAJ,EACIC,GAAJ,EAcA,OAZA9N,mBAAoB,SAAA+N,GAEdD,IAAJ,IAIIF,EAAiBG,EAArB,GACED,KAEAD,WAGGA,KAA6BC,GAAe,KAGrD,SA1FQF,CAAiB5N,EADW,KAE1BkN,EAAelN,EAFrB,IAGAA,iBACAA,wBAAqBuN,EAErB,GACEI,aAIJ,IACC,CAAC7K,EAAMwK,EAhBV,IAkBIF,EAAoB/B,QACtBtM,uBAA0CA,eAD5C,QAIA,GACMA,OAAA,cAAqC,SAAAa,GAAE,OAAKsN,EAAL,QACzCE,MAIJ,IAAMY,EAA2BtQ,EAAjC,GAEAO,GAAuB,WACjB+P,KACFtH,EAAS,CAAEjI,KAAMrD,EAAQ6S,sBAE1B,CAACvH,EAJJzI,IAMA,IAAMiQ,EAAwB,iBAC5B,SAAAlH,GAAK,OAAIN,EAAS,CAAEjI,KAAMrD,EAAR,sBAAuC4L,YACzD,CAFF,IAKMmH,EAAoB,iBACxB,qBAAezH,EAAS,CAAEjI,KAAMrD,EAAR,kBAAmCwE,GAAnC,EAAuCoH,YAC/D,CAFF,IAKMJ,EAAclJ,EAApB,GAEM0Q,EAAgCjS,EACpCwK,IADkD,8BAElD,CAAErI,SAAUsI,MAGd7H,gBAAwB,CACtB4O,iBADsB,EAEtBP,kBAFsB,EAGtBe,kBAHsB,EAItBD,sBAJsB,EAKtBE,kCAIJ,SAAS,GAAT,KAAuC,IAAZ9P,EAAY,EAAZA,SACzB0B,oBAAwB,SAAA+L,GAAG,OAAIzN,oBAA2B0B,EAA3B1B,GAAJ,IAE3B0B,4BAAgC7D,EAC9BmC,aAD4C,0BAE5C,CAAEA,SAAF,EAAsB0B,QCzO1B5E,4BACAA,8BACAA,gCCVAA,sCACAA,kCCKAE,eAGAF,4CACAA,kCACAA,2C,kCChBA,6DAKIiT,EAAQxQ,IAAMyQ,YAAW,SAAUC,EAAM3Q,GAC3C,IAAI4Q,EAAWD,EAAKC,SAChBvS,EAAYsS,EAAKtS,UACjBwS,EAAUF,EAAKE,QACfC,EAAWH,EAAKG,SAChBC,EAAaJ,EAAKI,WAClBC,EAAQL,EAAKK,MACbC,EAAON,EAAKM,KACZC,EAAUP,EAAKO,QACfC,EAAaR,EAAKQ,WAClB7S,EAAQ8S,YAA8BT,EAAM,CAAC,WAAY,YAAa,UAAW,WAAY,aAAc,QAAS,OAAQ,UAAW,eAEvIU,EAAoBC,YAAmBV,EAAU,SACjDW,EAAUC,IAAWnT,EAAWgT,EAAmBH,GAAWG,EAAoB,IAAMH,EAASD,GAAQI,EAAoB,IAAMJ,EAAMJ,GAAWQ,EAAoB,WAAYP,GAAYO,EAAoB,YAAaN,GAAcM,EAAoB,cAAeL,GAASK,EAAoB,UAC/SI,EAAQxR,IAAMyR,cAAc,QAASC,YAAS,GAAIrT,EAAO,CAC3DD,UAAWkT,EACXvR,IAAKA,KAGP,GAAImR,EAAY,CACd,IAAIS,EAAkBP,EAAoB,cAM1C,MAJ0B,kBAAfF,IACTS,EAAkBA,EAAkB,IAAMT,GAGrClR,IAAMyR,cAAc,MAAO,CAChCrT,UAAWuT,GACVH,GAGL,OAAOA,KAEMhB","file":"static/js/1.chunk.js","sourcesContent":["import React from 'react'\n\nlet renderErr = 'Renderer Error ☝️'\n\nexport const actions = {\n  init: 'init',\n}\n\nexport const defaultColumn = {\n  Cell: ({ cell: { value = '' } }) => value,\n  width: 150,\n  minWidth: 0,\n  maxWidth: Number.MAX_SAFE_INTEGER,\n}\n\nexport function defaultOrderByFn(arr, funcs, dirs) {\n  return [...arr].sort((rowA, rowB) => {\n    for (let i = 0; i < funcs.length; i += 1) {\n      const sortFn = funcs[i]\n      const desc = dirs[i] === false || dirs[i] === 'desc'\n      const sortInt = sortFn(rowA, rowB)\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt\n      }\n    }\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index\n  })\n}\n\nexport function defaultGroupByFn(rows, columnId) {\n  return rows.reduce((prev, row, i) => {\n    // TODO: Might want to implement a key serializer here so\n    // irregular column values can still be grouped if needed?\n    const resKey = `${row.values[columnId]}`\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : []\n    prev[resKey].push(row)\n    return prev\n  }, {})\n}\n\nfunction mergeProps(...propList) {\n  return propList.reduce((props, next) => {\n    const { style, className, ...rest } = next\n\n    props = {\n      ...props,\n      ...rest,\n    }\n\n    if (style) {\n      props.style = props.style\n        ? { ...(props.style || {}), ...(style || {}) }\n        : style\n    }\n\n    if (className) {\n      props.className = props.className\n        ? props.className + ' ' + className\n        : className\n    }\n\n    if (props.className === '') {\n      delete props.className\n    }\n\n    return props\n  }, {})\n}\n\nfunction handlePropGetter(prevProps, userProps, meta) {\n  // Handle a lambda, pass it the previous props\n  if (typeof userProps === 'function') {\n    return handlePropGetter({}, userProps(prevProps, meta))\n  }\n\n  // Handle an array, merge each item as separate props\n  if (Array.isArray(userProps)) {\n    return mergeProps(prevProps, ...userProps)\n  }\n\n  // Handle an object by default, merge the two objects\n  return mergeProps(prevProps, userProps)\n}\n\nexport const makePropGetter = (hooks, meta = {}) => {\n  return (userProps = {}) =>\n    [...hooks, userProps].reduce(\n      (prev, next) =>\n        handlePropGetter(prev, next, {\n          ...meta,\n          userProps,\n        }),\n      {}\n    )\n}\n\nexport const reduceHooks = (hooks, initial, meta = {}, allowUndefined) =>\n  hooks.reduce((prev, next) => {\n    const nextValue = next(prev, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (!allowUndefined && typeof nextValue === 'undefined') {\n        console.info(next)\n        throw new Error(\n          'React Table: A reducer hook ☝️ just returned undefined! This is not allowed.'\n        )\n      }\n    }\n    return nextValue\n  }, initial)\n\nexport const loopHooks = (hooks, context, meta = {}) =>\n  hooks.forEach(hook => {\n    const nextValue = hook(context, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof nextValue !== 'undefined') {\n        console.info(hook, nextValue)\n        throw new Error(\n          'React Table: A loop-type hook ☝️ just returned a value! This is not allowed.'\n        )\n      }\n    }\n  })\n\nexport function ensurePluginOrder(plugins, befores, pluginName, afters) {\n  if (process.env.NODE_ENV !== 'production' && afters) {\n    throw new Error(\n      `Defining plugins in the \"after\" section of ensurePluginOrder is no longer supported (see plugin ${pluginName})`\n    )\n  }\n  const pluginIndex = plugins.findIndex(\n    plugin => plugin.pluginName === pluginName\n  )\n\n  if (pluginIndex === -1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`The plugin \"${pluginName}\" was not found in the plugin list!\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\n\n  ${pluginName}.pluginName = '${pluginName}'\n`)\n    }\n  }\n\n  befores.forEach(before => {\n    const beforeIndex = plugins.findIndex(\n      plugin => plugin.pluginName === before\n    )\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `React Table: The ${pluginName} plugin hook must be placed after the ${before} plugin hook!`\n        )\n      }\n    }\n  })\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\nexport function useGetLatest(obj) {\n  const ref = React.useRef()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current, [])\n}\n\n// SSR has issues with useLayoutEffect still, so use useEffect during SSR\nexport const safeUseLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nexport function useMountedLayoutEffect(fn, deps) {\n  const mountedRef = React.useRef(false)\n\n  safeUseLayoutEffect(() => {\n    if (mountedRef.current) {\n      fn()\n    }\n    mountedRef.current = true\n    // eslint-disable-next-line\n  }, deps)\n}\n\nexport function useAsyncDebounce(defaultFn, defaultWait = 0) {\n  const debounceRef = React.useRef({})\n\n  const getDefaultFn = useGetLatest(defaultFn)\n  const getDefaultWait = useGetLatest(defaultWait)\n\n  return React.useCallback(\n    async (...args) => {\n      if (!debounceRef.current.promise) {\n        debounceRef.current.promise = new Promise((resolve, reject) => {\n          debounceRef.current.resolve = resolve\n          debounceRef.current.reject = reject\n        })\n      }\n\n      if (debounceRef.current.timeout) {\n        clearTimeout(debounceRef.current.timeout)\n      }\n\n      debounceRef.current.timeout = setTimeout(async () => {\n        delete debounceRef.current.timeout\n        try {\n          debounceRef.current.resolve(await getDefaultFn()(...args))\n        } catch (err) {\n          debounceRef.current.reject(err)\n        } finally {\n          delete debounceRef.current.promise\n        }\n      }, getDefaultWait())\n\n      return debounceRef.current.promise\n    },\n    [getDefaultFn, getDefaultWait]\n  )\n}\n\nexport function makeRenderer(instance, column, meta = {}) {\n  return (type, userProps = {}) => {\n    const Comp = typeof type === 'string' ? column[type] : type\n\n    if (typeof Comp === 'undefined') {\n      console.info(column)\n      throw new Error(renderErr)\n    }\n\n    return flexRender(Comp, { ...instance, column, ...meta, ...userProps })\n  }\n}\n\nexport function flexRender(Comp, props) {\n  return isReactComponent(Comp) ? <Comp {...props} /> : Comp\n}\n\nfunction isClassComponent(component) {\n  return (\n    typeof component === 'function' &&\n    !!(() => {\n      let proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isFunctionComponent(component) {\n  return typeof component === 'function'\n}\n\nfunction isExoticComponent(component) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\nfunction isReactComponent(component) {\n  return (\n    isClassComponent(component) ||\n    isFunctionComponent(component) ||\n    isExoticComponent(component)\n  )\n}\n","import React from 'react'\nimport { defaultColumn } from './publicUtils'\n\n// Find the depth of the columns\nexport function findMaxDepth(columns, depth = 0) {\n  return columns.reduce((prev, curr) => {\n    if (curr.columns) {\n      return Math.max(prev, findMaxDepth(curr.columns, depth + 1))\n    }\n    return depth\n  }, 0)\n}\n\n// Build the visible columns, headers and flat column list\nexport function linkColumnStructure(columns, parent, depth = 0) {\n  return columns.map(column => {\n    column = {\n      ...column,\n      parent,\n      depth,\n    }\n\n    assignColumnAccessor(column)\n\n    if (column.columns) {\n      column.columns = linkColumnStructure(column.columns, column, depth + 1)\n    }\n    return column\n  })\n}\n\nexport function flattenColumns(columns) {\n  return flattenBy(columns, 'columns')\n}\n\nexport function assignColumnAccessor(column) {\n  // First check for string accessor\n  let { id, accessor, Header } = column\n\n  if (typeof accessor === 'string') {\n    id = id || accessor\n    const accessorPath = accessor.split('.')\n    accessor = row => getBy(row, accessorPath)\n  }\n\n  if (!id && typeof Header === 'string' && Header) {\n    id = Header\n  }\n\n  if (!id && column.columns) {\n    console.error(column)\n    throw new Error('A column ID (or unique \"Header\" value) is required!')\n  }\n\n  if (!id) {\n    console.error(column)\n    throw new Error('A column ID (or string accessor) is required!')\n  }\n\n  Object.assign(column, {\n    id,\n    accessor,\n  })\n\n  return column\n}\n\n// Find the depth of the columns\nexport function dedupeBy(arr, fn) {\n  return [...arr]\n    .reverse()\n    .filter((d, i, all) => all.findIndex(dd => fn(dd) === fn(d)) === i)\n    .reverse()\n}\n\nexport function decorateColumn(column, userDefaultColumn) {\n  if (!userDefaultColumn) {\n    throw new Error()\n  }\n  Object.assign(column, {\n    // Make sure there is a fallback header, just in case\n    Header: () => <>&nbsp;</>,\n    Footer: () => <>&nbsp;</>,\n    ...defaultColumn,\n    ...userDefaultColumn,\n    ...column,\n  })\n  return column\n}\n\n// Build the header groups from the bottom up\nexport function makeHeaderGroups(allColumns, defaultColumn) {\n  const headerGroups = []\n\n  let scanColumns = allColumns\n\n  let uid = 0\n  const getUID = () => uid++\n\n  while (scanColumns.length) {\n    // The header group we are creating\n    const headerGroup = {\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const parentColumns = []\n\n    const hasParents = scanColumns.some(d => d.parent)\n\n    // Scan each column for parents\n    scanColumns.forEach(column => {\n      // What is the latest (last) parent column?\n      let latestParentColumn = [...parentColumns].reverse()[0]\n\n      let newParent\n\n      if (hasParents) {\n        // If the column has a parent, add it if necessary\n        if (column.parent) {\n          newParent = {\n            ...column.parent,\n            originalId: column.parent.id,\n            id: `${column.parent.id}_${getUID()}`,\n            headers: [column],\n          }\n        } else {\n          // If other columns have parents, we'll need to add a place holder if necessary\n          const originalId = `${column.id}_placeholder`\n          newParent = decorateColumn(\n            {\n              originalId,\n              id: `${column.id}_placeholder_${getUID()}`,\n              placeholderOf: column,\n              headers: [column],\n            },\n            defaultColumn\n          )\n        }\n\n        // If the resulting parent columns are the same, just add\n        // the column and increment the header span\n        if (\n          latestParentColumn &&\n          latestParentColumn.originalId === newParent.originalId\n        ) {\n          latestParentColumn.headers.push(column)\n        } else {\n          parentColumns.push(newParent)\n        }\n      }\n\n      headerGroup.headers.push(column)\n    })\n\n    headerGroups.push(headerGroup)\n\n    // Start scanning the parent columns\n    scanColumns = parentColumns\n  }\n\n  return headerGroups.reverse()\n}\n\nconst pathObjCache = new Map()\n\nexport function getBy(obj, path, def) {\n  if (!path) {\n    return obj\n  }\n  const cacheKey = typeof path === 'function' ? path : JSON.stringify(path)\n\n  const pathObj =\n    pathObjCache.get(cacheKey) ||\n    (() => {\n      const pathObj = makePathArray(path)\n      pathObjCache.set(cacheKey, pathObj)\n      return pathObj\n    })()\n\n  let val\n\n  try {\n    val = pathObj.reduce((cursor, pathPart) => cursor[pathPart], obj)\n  } catch (e) {\n    // continue regardless of error\n  }\n  return typeof val !== 'undefined' ? val : def\n}\n\nexport function getFirstDefined(...args) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i]\n    }\n  }\n}\n\nexport function getElementDimensions(element) {\n  const rect = element.getBoundingClientRect()\n  const style = window.getComputedStyle(element)\n  const margins = {\n    left: parseInt(style.marginLeft),\n    right: parseInt(style.marginRight),\n  }\n  const padding = {\n    left: parseInt(style.paddingLeft),\n    right: parseInt(style.paddingRight),\n  }\n  return {\n    left: Math.ceil(rect.left),\n    width: Math.ceil(rect.width),\n    outerWidth: Math.ceil(\n      rect.width + margins.left + margins.right + padding.left + padding.right\n    ),\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    paddingLeft: padding.left,\n    paddingRight: padding.right,\n    scrollWidth: element.scrollWidth,\n  }\n}\n\nexport function isFunction(a) {\n  if (typeof a === 'function') {\n    return a\n  }\n}\n\nexport function flattenBy(arr, key) {\n  const flat = []\n\n  const recurse = arr => {\n    arr.forEach(d => {\n      if (!d[key]) {\n        flat.push(d)\n      } else {\n        recurse(d[key])\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function expandRows(\n  rows,\n  { manualExpandedKey, expanded, expandSubRows = true }\n) {\n  const expandedRows = []\n\n  const handleRow = row => {\n    row.isExpanded =\n      (row.original && row.original[manualExpandedKey]) || expanded[row.id]\n\n    row.canExpand = row.subRows && !!row.subRows.length\n\n    expandedRows.push(row)\n\n    if (expandSubRows && row.subRows && row.subRows.length && row.isExpanded) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rows.forEach(handleRow)\n\n  return expandedRows\n}\n\nexport function getFilterMethod(filter, userFilterTypes, filterTypes) {\n  return (\n    isFunction(filter) ||\n    userFilterTypes[filter] ||\n    filterTypes[filter] ||\n    filterTypes.text\n  )\n}\n\nexport function shouldAutoRemoveFilter(autoRemove, value, column) {\n  return autoRemove ? autoRemove(value, column) : typeof value === 'undefined'\n}\n\nexport function unpreparedAccessWarning() {\n  throw new Error(\n    'React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.'\n  )\n}\n\n//\n\nconst reOpenBracket = /\\[/g\nconst reCloseBracket = /\\]/g\n\nfunction makePathArray(obj) {\n  return (\n    flattenDeep(obj)\n      // remove all periods in parts\n      .map(d => String(d).replace('.', '_'))\n      // join parts using period\n      .join('.')\n      // replace brackets with periods\n      .replace(reOpenBracket, '.')\n      .replace(reCloseBracket, '')\n      // split it back out on periods\n      .split('.')\n  )\n}\n\nfunction flattenDeep(arr, newArr = []) {\n  if (!Array.isArray(arr)) {\n    newArr.push(arr)\n  } else {\n    for (let i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr)\n    }\n  }\n  return newArr\n}\n","const defaultGetTableProps = props => ({\n  role: 'table',\n  ...props,\n})\n\nconst defaultGetTableBodyProps = props => ({\n  role: 'rowgroup',\n  ...props,\n})\n\nconst defaultGetHeaderProps = (props, { column }) => ({\n  key: `header_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  role: 'columnheader',\n  ...props,\n})\n\nconst defaultGetFooterProps = (props, { column }) => ({\n  key: `footer_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  ...props,\n})\n\nconst defaultGetHeaderGroupProps = (props, { index }) => ({\n  key: `headerGroup_${index}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetFooterGroupProps = (props, { index }) => ({\n  key: `footerGroup_${index}`,\n  ...props,\n})\n\nconst defaultGetRowProps = (props, { row }) => ({\n  key: `row_${row.id}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetCellProps = (props, { cell }) => ({\n  key: `cell_${cell.row.id}_${cell.column.id}`,\n  role: 'cell',\n  ...props,\n})\n\nexport default function makeDefaultPluginHooks() {\n  return {\n    useOptions: [],\n    stateReducers: [],\n    useControlledState: [],\n    columns: [],\n    columnsDeps: [],\n    allColumns: [],\n    allColumnsDeps: [],\n    accessValue: [],\n    materializedColumns: [],\n    materializedColumnsDeps: [],\n    useInstanceAfterData: [],\n    visibleColumns: [],\n    visibleColumnsDeps: [],\n    headerGroups: [],\n    headerGroupsDeps: [],\n    useInstanceBeforeDimensions: [],\n    useInstance: [],\n    prepareRow: [],\n    getTableProps: [defaultGetTableProps],\n    getTableBodyProps: [defaultGetTableBodyProps],\n    getHeaderGroupProps: [defaultGetHeaderGroupProps],\n    getFooterGroupProps: [defaultGetFooterGroupProps],\n    getHeaderProps: [defaultGetHeaderProps],\n    getFooterProps: [defaultGetFooterProps],\n    getRowProps: [defaultGetRowProps],\n    getCellProps: [defaultGetCellProps],\n    useFinalInstance: [],\n  }\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useGetLatest,\n  makePropGetter,\n} from '../publicUtils'\n\nactions.resetHiddenColumns = 'resetHiddenColumns'\nactions.toggleHideColumn = 'toggleHideColumn'\nactions.setHiddenColumns = 'setHiddenColumns'\nactions.toggleHideAllColumns = 'toggleHideAllColumns'\n\nexport const useColumnVisibility = hooks => {\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps]\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps]\n\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n  hooks.headerGroupsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.hiddenColumns,\n  ])\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnVisibility.pluginName = 'useColumnVisibility'\n\nconst defaultGetToggleHiddenProps = (props, { column }) => [\n  props,\n  {\n    onChange: e => {\n      column.toggleHidden(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: column.isVisible,\n    title: 'Toggle Column Visible',\n  },\n]\n\nconst defaultGetToggleHideAllColumnsProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleHideAllColumns(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n    title: 'Toggle All Columns Hidden',\n    indeterminate:\n      !instance.allColumnsHidden && instance.state.hiddenColumns.length,\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      hiddenColumns: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: instance.initialState.hiddenColumns || [],\n    }\n  }\n\n  if (action.type === actions.toggleHideColumn) {\n    const should =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.includes(action.columnId)\n\n    const hiddenColumns = should\n      ? [...state.hiddenColumns, action.columnId]\n      : state.hiddenColumns.filter(d => d !== action.columnId)\n\n    return {\n      ...state,\n      hiddenColumns,\n    }\n  }\n\n  if (action.type === actions.setHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: functionalUpdate(action.value, state.hiddenColumns),\n    }\n  }\n\n  if (action.type === actions.toggleHideAllColumns) {\n    const shouldAll =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.length\n\n    return {\n      ...state,\n      hiddenColumns: shouldAll ? instance.allColumns.map(d => d.id) : [],\n    }\n  }\n}\n\nfunction useInstanceBeforeDimensions(instance) {\n  const {\n    headers,\n    state: { hiddenColumns },\n  } = instance\n\n  const isMountedRef = React.useRef(false)\n\n  if (!isMountedRef.current) {\n  }\n\n  const handleColumn = (column, parentVisible) => {\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id)\n\n    let totalVisibleHeaderCount = 0\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(\n        subColumn =>\n          (totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible))\n      )\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount\n\n    return totalVisibleHeaderCount\n  }\n\n  let totalVisibleHeaderCount = 0\n\n  headers.forEach(\n    subHeader => (totalVisibleHeaderCount += handleColumn(subHeader, true))\n  )\n}\n\nfunction useInstance(instance) {\n  const {\n    flatHeaders,\n    dispatch,\n    allColumns,\n    getHooks,\n    state: { hiddenColumns },\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  const allColumnsHidden = allColumns.length === hiddenColumns.length\n\n  const toggleHideColumn = React.useCallback(\n    (columnId, value) =>\n      dispatch({ type: actions.toggleHideColumn, columnId, value }),\n    [dispatch]\n  )\n\n  const setHiddenColumns = React.useCallback(\n    value => dispatch({ type: actions.setHiddenColumns, value }),\n    [dispatch]\n  )\n\n  const toggleHideAllColumns = React.useCallback(\n    value => dispatch({ type: actions.toggleHideAllColumns, value }),\n    [dispatch]\n  )\n\n  const getToggleHideAllColumnsProps = makePropGetter(\n    getHooks().getToggleHideAllColumnsProps,\n    { instance: getInstance() }\n  )\n\n  flatHeaders.forEach(column => {\n    column.toggleHidden = value => {\n      dispatch({\n        type: actions.toggleHideColumn,\n        columnId: column.id,\n        value,\n      })\n    }\n\n    column.getToggleHiddenProps = makePropGetter(\n      getHooks().getToggleHiddenProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n  })\n\n  Object.assign(instance, {\n    allColumnsHidden,\n    toggleHideColumn,\n    setHiddenColumns,\n    toggleHideAllColumns,\n    getToggleHideAllColumnsProps,\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  linkColumnStructure,\n  flattenColumns,\n  assignColumnAccessor,\n  unpreparedAccessWarning,\n  makeHeaderGroups,\n  decorateColumn,\n  dedupeBy,\n} from '../utils'\n\nimport {\n  useGetLatest,\n  reduceHooks,\n  actions,\n  loopHooks,\n  makePropGetter,\n  makeRenderer,\n} from '../publicUtils'\n\nimport makeDefaultPluginHooks from '../makeDefaultPluginHooks'\n\nimport { useColumnVisibility } from './useColumnVisibility'\n\nconst defaultInitialState = {}\nconst defaultColumnInstance = {}\nconst defaultReducer = (state, action, prevState) => state\nconst defaultGetSubRows = (row, index) => row.subRows || []\nconst defaultGetRowId = (row, index, parent) =>\n  `${parent ? [parent.id, index].join('.') : index}`\nconst defaultUseControlledState = d => d\n\nfunction applyDefaults(props) {\n  const {\n    initialState = defaultInitialState,\n    defaultColumn = defaultColumnInstance,\n    getSubRows = defaultGetSubRows,\n    getRowId = defaultGetRowId,\n    stateReducer = defaultReducer,\n    useControlledState = defaultUseControlledState,\n    ...rest\n  } = props\n\n  return {\n    ...rest,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  }\n}\n\nexport const useTable = (props, ...plugins) => {\n  // Apply default props\n  props = applyDefaults(props)\n\n  // Add core plugins\n  plugins = [useColumnVisibility, ...plugins]\n\n  // Create the table instance\n  let instanceRef = React.useRef({})\n\n  // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n  const getInstance = useGetLatest(instanceRef.current)\n\n  // Assign the props, plugins and hooks to the instance\n  Object.assign(getInstance(), {\n    ...props,\n    plugins,\n    hooks: makeDefaultPluginHooks(),\n  })\n\n  // Allow plugins to register hooks as early as possible\n  plugins.filter(Boolean).forEach(plugin => {\n    plugin(getInstance().hooks)\n  })\n\n  // Consume all hooks and make a getter for them\n  const getHooks = useGetLatest(getInstance().hooks)\n  getInstance().getHooks = getHooks\n  delete getInstance().hooks\n\n  // Allow useOptions hooks to modify the options coming into the table\n  Object.assign(\n    getInstance(),\n    reduceHooks(getHooks().useOptions, applyDefaults(props))\n  )\n\n  const {\n    data,\n    columns: userColumns,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  } = getInstance()\n\n  // Setup user reducer ref\n  const getStateReducer = useGetLatest(stateReducer)\n\n  // Build the reducer\n  const reducer = React.useCallback(\n    (state, action) => {\n      // Detect invalid actions\n      if (!action.type) {\n        console.info({ action })\n        throw new Error('Unknown Action 👆')\n      }\n\n      // Reduce the state from all plugin reducers\n      return [\n        ...getHooks().stateReducers,\n        // Allow the user to add their own state reducer(s)\n        ...(Array.isArray(getStateReducer())\n          ? getStateReducer()\n          : [getStateReducer()]),\n      ].reduce(\n        (s, handler) => handler(s, action, state, getInstance()) || s,\n        state\n      )\n    },\n    [getHooks, getStateReducer, getInstance]\n  )\n\n  // Start the reducer\n  const [reducerState, dispatch] = React.useReducer(reducer, undefined, () =>\n    reducer(initialState, { type: actions.init })\n  )\n\n  // Allow the user to control the final state with hooks\n  const state = reduceHooks(\n    [...getHooks().useControlledState, useControlledState],\n    reducerState,\n    { instance: getInstance() }\n  )\n\n  Object.assign(getInstance(), {\n    state,\n    dispatch,\n  })\n\n  // Decorate All the columns\n  const columns = React.useMemo(\n    () =>\n      linkColumnStructure(\n        reduceHooks(getHooks().columns, userColumns, {\n          instance: getInstance(),\n        })\n      ),\n    [\n      getHooks,\n      getInstance,\n      userColumns,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().columnsDeps, [], { instance: getInstance() }),\n    ]\n  )\n  getInstance().columns = columns\n\n  // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let allColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().allColumns, flattenColumns(columns), {\n        instance: getInstance(),\n      }).map(assignColumnAccessor),\n    [\n      columns,\n      getHooks,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().allColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().allColumns = allColumns\n\n  // Access the row model using initial columns\n  const coreDataModel = React.useMemo(() => {\n    let rows = []\n    let flatRows = []\n    const rowsById = {}\n\n    const allColumnsQueue = [...allColumns]\n\n    while (allColumnsQueue.length) {\n      const column = allColumnsQueue.shift()\n      accessRowsForColumn({\n        data,\n        rows,\n        flatRows,\n        rowsById,\n        column,\n        getRowId,\n        getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance,\n      })\n    }\n\n    return { rows, flatRows, rowsById }\n  }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance])\n\n  // Allow materialized columns to also access data\n  const [rows, flatRows, rowsById, materializedColumns] = React.useMemo(() => {\n    const { rows, flatRows, rowsById } = coreDataModel\n    const materializedColumns = reduceHooks(\n      getHooks().materializedColumns,\n      [],\n      {\n        instance: getInstance(),\n      }\n    )\n\n    materializedColumns.forEach(d => assignColumnAccessor(d))\n\n    const materializedColumnsQueue = [...materializedColumns]\n\n    while (materializedColumnsQueue.length) {\n      const column = materializedColumnsQueue.shift()\n      accessRowsForColumn({\n        data,\n        rows,\n        flatRows,\n        rowsById,\n        column,\n        getRowId,\n        getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance,\n      })\n    }\n\n    return [rows, flatRows, rowsById, materializedColumns]\n  }, [\n    coreDataModel,\n    getHooks,\n    getInstance,\n    data,\n    getRowId,\n    getSubRows,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    ...reduceHooks(getHooks().materializedColumnsDeps, [], {\n      instance: getInstance(),\n    }),\n  ])\n\n  Object.assign(getInstance(), {\n    rows,\n    flatRows,\n    rowsById,\n    materializedColumns,\n  })\n\n  loopHooks(getHooks().useInstanceAfterData, getInstance())\n\n  // Combine new materialized columns with all columns (dedupe prefers later columns)\n  allColumns = React.useMemo(\n    () => dedupeBy([...allColumns, ...materializedColumns], d => d.id),\n    [allColumns, materializedColumns]\n  )\n  getInstance().allColumns = allColumns\n\n  // Get the flat list of all columns AFTER the rows\n  // have been access, and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let visibleColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().visibleColumns, allColumns, {\n        instance: getInstance(),\n      }).map(d => decorateColumn(d, defaultColumn)),\n    [\n      getHooks,\n      allColumns,\n      getInstance,\n      defaultColumn,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().visibleColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n\n  // Combine new visible columns with all columns (dedupe prefers later columns)\n  allColumns = React.useMemo(\n    () => dedupeBy([...allColumns, ...visibleColumns], d => d.id),\n    [allColumns, visibleColumns]\n  )\n  getInstance().allColumns = allColumns\n\n  // Make the headerGroups\n  const headerGroups = React.useMemo(\n    () =>\n      reduceHooks(\n        getHooks().headerGroups,\n        makeHeaderGroups(visibleColumns, defaultColumn),\n        getInstance()\n      ),\n    [\n      getHooks,\n      visibleColumns,\n      defaultColumn,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().headerGroupsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().headerGroups = headerGroups\n\n  // Get the first level of headers\n  const headers = React.useMemo(\n    () => (headerGroups.length ? headerGroups[0].headers : []),\n    [headerGroups]\n  )\n  getInstance().headers = headers\n\n  // Provide a flat header list for utilities\n  getInstance().flatHeaders = headerGroups.reduce(\n    (all, headerGroup) => [...all, ...headerGroup.headers],\n    []\n  )\n\n  loopHooks(getHooks().useInstanceBeforeDimensions, getInstance())\n\n  // Filter columns down to visible ones\n  const visibleColumnsDep = visibleColumns\n    .filter(d => d.isVisible)\n    .map(d => d.id)\n    .sort()\n    .join('_')\n\n  visibleColumns = React.useMemo(\n    () => visibleColumns.filter(d => d.isVisible),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [visibleColumns, visibleColumnsDep]\n  )\n  getInstance().visibleColumns = visibleColumns\n\n  // Header Visibility is needed by this point\n  const [\n    totalColumnsMinWidth,\n    totalColumnsWidth,\n    totalColumnsMaxWidth,\n  ] = calculateHeaderWidths(headers)\n\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth\n  getInstance().totalColumnsWidth = totalColumnsWidth\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth\n\n  loopHooks(getHooks().useInstance, getInstance())\n\n  // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n  ;[...getInstance().flatHeaders, ...getInstance().allColumns].forEach(\n    column => {\n      // Give columns/headers rendering power\n      column.render = makeRenderer(getInstance(), column)\n\n      // Give columns/headers a default getHeaderProps\n      column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\n        instance: getInstance(),\n        column,\n      })\n\n      // Give columns/headers a default getFooterProps\n      column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\n        instance: getInstance(),\n        column,\n      })\n    }\n  )\n\n  getInstance().headerGroups = getInstance().headerGroups.filter(\n    (headerGroup, i) => {\n      // Filter out any headers and headerGroups that don't have visible columns\n      headerGroup.headers = headerGroup.headers.filter(column => {\n        const recurse = headers =>\n          headers.filter(column => {\n            if (column.headers) {\n              return recurse(column.headers)\n            }\n            return column.isVisible\n          }).length\n        if (column.headers) {\n          return recurse(column.headers)\n        }\n        return column.isVisible\n      })\n\n      // Give headerGroups getRowProps\n      if (headerGroup.headers.length) {\n        headerGroup.getHeaderGroupProps = makePropGetter(\n          getHooks().getHeaderGroupProps,\n          { instance: getInstance(), headerGroup, index: i }\n        )\n\n        headerGroup.getFooterGroupProps = makePropGetter(\n          getHooks().getFooterGroupProps,\n          { instance: getInstance(), headerGroup, index: i }\n        )\n\n        return true\n      }\n\n      return false\n    }\n  )\n\n  getInstance().footerGroups = [...getInstance().headerGroups].reverse()\n\n  // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n\n  getInstance().prepareRow = React.useCallback(\n    row => {\n      row.getRowProps = makePropGetter(getHooks().getRowProps, {\n        instance: getInstance(),\n        row,\n      })\n\n      // Build the visible cells for each row\n      row.allCells = allColumns.map(column => {\n        const cell = {\n          column,\n          row,\n          value: row.values[column.id],\n        }\n\n        // Give each cell a getCellProps base\n        cell.getCellProps = makePropGetter(getHooks().getCellProps, {\n          instance: getInstance(),\n          cell,\n        })\n\n        // Give each cell a renderer function (supports multiple renderers)\n        cell.render = makeRenderer(getInstance(), column, {\n          row,\n          cell,\n        })\n\n        return cell\n      })\n\n      row.cells = visibleColumns.map(column =>\n        row.allCells.find(cell => cell.column.id === column.id)\n      )\n\n      // need to apply any row specific hooks (useExpanded requires this)\n      loopHooks(getHooks().prepareRow, row, { instance: getInstance() })\n    },\n    [getHooks, getInstance, allColumns, visibleColumns]\n  )\n\n  getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\n    instance: getInstance(),\n  })\n\n  getInstance().getTableBodyProps = makePropGetter(\n    getHooks().getTableBodyProps,\n    {\n      instance: getInstance(),\n    }\n  )\n\n  loopHooks(getHooks().useFinalInstance, getInstance())\n\n  return getInstance()\n}\n\nfunction calculateHeaderWidths(headers, left = 0) {\n  let sumTotalMinWidth = 0\n  let sumTotalWidth = 0\n  let sumTotalMaxWidth = 0\n  let sumTotalFlexWidth = 0\n\n  headers.forEach(header => {\n    let { headers: subHeaders } = header\n\n    header.totalLeft = left\n\n    if (subHeaders && subHeaders.length) {\n      const [\n        totalMinWidth,\n        totalWidth,\n        totalMaxWidth,\n        totalFlexWidth,\n      ] = calculateHeaderWidths(subHeaders, left)\n      header.totalMinWidth = totalMinWidth\n      header.totalWidth = totalWidth\n      header.totalMaxWidth = totalMaxWidth\n      header.totalFlexWidth = totalFlexWidth\n    } else {\n      header.totalMinWidth = header.minWidth\n      header.totalWidth = Math.min(\n        Math.max(header.minWidth, header.width),\n        header.maxWidth\n      )\n      header.totalMaxWidth = header.maxWidth\n      header.totalFlexWidth = header.canResize ? header.totalWidth : 0\n    }\n    if (header.isVisible) {\n      left += header.totalWidth\n      sumTotalMinWidth += header.totalMinWidth\n      sumTotalWidth += header.totalWidth\n      sumTotalMaxWidth += header.totalMaxWidth\n      sumTotalFlexWidth += header.totalFlexWidth\n    }\n  })\n\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth]\n}\n\nfunction accessRowsForColumn({\n  data,\n  rows,\n  flatRows,\n  rowsById,\n  column,\n  getRowId,\n  getSubRows,\n  accessValueHooks,\n  getInstance,\n}) {\n  // Access the row's data column-by-column\n  // We do it this way so we can incrementally add materialized\n  // columns after the first pass and avoid excessive looping\n  const accessRow = (originalRow, rowIndex, depth = 0, parent, parentRows) => {\n    // Keep the original reference around\n    const original = originalRow\n\n    const id = getRowId(originalRow, rowIndex, parent)\n\n    let row = rowsById[id]\n\n    // If the row hasn't been created, let's make it\n    if (!row) {\n      row = {\n        id,\n        original,\n        index: rowIndex,\n        depth,\n        cells: [{}], // This is a dummy cell\n      }\n\n      // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n      row.cells.map = unpreparedAccessWarning\n      row.cells.filter = unpreparedAccessWarning\n      row.cells.forEach = unpreparedAccessWarning\n      row.cells[0].getCellProps = unpreparedAccessWarning\n\n      // Create the cells and values\n      row.values = {}\n\n      // Push this row into the parentRows array\n      parentRows.push(row)\n      // Keep track of every row in a flat array\n      flatRows.push(row)\n      // Also keep track of every row by its ID\n      rowsById[id] = row\n\n      // Get the original subrows\n      row.originalSubRows = getSubRows(originalRow, rowIndex)\n\n      // Then recursively access them\n      if (row.originalSubRows) {\n        const subRows = []\n        row.originalSubRows.forEach((d, i) =>\n          accessRow(d, i, depth + 1, row, subRows)\n        )\n        // Keep the new subRows array on the row\n        row.subRows = subRows\n      }\n    } else if (row.subRows) {\n      // If the row exists, then it's already been accessed\n      // Keep recursing, but don't worry about passing the\n      // accumlator array (those rows already exist)\n      row.originalSubRows.forEach((d, i) => accessRow(d, i, depth + 1, row))\n    }\n\n    // If the column has an accessor, use it to get a value\n    if (column.accessor) {\n      row.values[column.id] = column.accessor(originalRow, rowIndex, row)\n    }\n\n    // Allow plugins to manipulate the column value\n    row.values[column.id] = reduceHooks(\n      accessValueHooks,\n      row.values[column.id],\n      {\n        row,\n        column,\n        instance: getInstance(),\n      },\n      true\n    )\n  }\n\n  data.forEach((originalRow, rowIndex) =>\n    accessRow(originalRow, rowIndex, 0, undefined, rows)\n  )\n}\n","import React from 'react'\n\nimport { expandRows } from '../utils'\n\nimport {\n  useGetLatest,\n  actions,\n  useMountedLayoutEffect,\n  makePropGetter,\n  ensurePluginOrder,\n} from '../publicUtils'\n\n// Actions\nactions.resetExpanded = 'resetExpanded'\nactions.toggleRowExpanded = 'toggleRowExpanded'\nactions.toggleAllRowsExpanded = 'toggleAllRowsExpanded'\n\nexport const useExpanded = hooks => {\n  hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps]\n  hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseExpanded.pluginName = 'useExpanded'\n\nconst defaultGetToggleAllRowsExpandedProps = (props, { instance }) => [\n  props,\n  {\n    onClick: e => {\n      instance.toggleAllRowsExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle All Rows Expanded',\n  },\n]\n\nconst defaultGetToggleRowExpandedProps = (props, { row }) => [\n  props,\n  {\n    onClick: () => {\n      row.toggleRowExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle Row Expanded',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      expanded: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetExpanded) {\n    return {\n      ...state,\n      expanded: instance.initialState.expanded || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsExpanded) {\n    const { value } = action\n    const { isAllRowsExpanded, rowsById } = instance\n\n    const expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded\n\n    if (expandAll) {\n      const expanded = {}\n\n      Object.keys(rowsById).forEach(rowId => {\n        expanded[rowId] = true\n      })\n\n      return {\n        ...state,\n        expanded,\n      }\n    }\n\n    return {\n      ...state,\n      expanded: {},\n    }\n  }\n\n  if (action.type === actions.toggleRowExpanded) {\n    const { id, value: setExpanded } = action\n    const exists = state.expanded[id]\n\n    const shouldExist =\n      typeof setExpanded !== 'undefined' ? setExpanded : !exists\n\n    if (!exists && shouldExist) {\n      return {\n        ...state,\n        expanded: {\n          ...state.expanded,\n          [id]: true,\n        },\n      }\n    } else if (exists && !shouldExist) {\n      const { [id]: _, ...rest } = state.expanded\n      return {\n        ...state,\n        expanded: rest,\n      }\n    } else {\n      return state\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    rowsById,\n    manualExpandedKey = 'expanded',\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    autoResetExpanded = true,\n    getHooks,\n    plugins,\n    state: { expanded },\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'],\n    'useExpanded'\n  )\n\n  const getAutoResetExpanded = useGetLatest(autoResetExpanded)\n\n  let isAllRowsExpanded = Boolean(\n    Object.keys(rowsById).length && Object.keys(expanded).length\n  )\n\n  if (isAllRowsExpanded) {\n    if (Object.keys(rowsById).some(id => !expanded[id])) {\n      isAllRowsExpanded = false\n    }\n  }\n\n  // Bypass any effects from firing when this changes\n  useMountedLayoutEffect(() => {\n    if (getAutoResetExpanded()) {\n      dispatch({ type: actions.resetExpanded })\n    }\n  }, [dispatch, data])\n\n  const toggleRowExpanded = React.useCallback(\n    (id, value) => {\n      dispatch({ type: actions.toggleRowExpanded, id, value })\n    },\n    [dispatch]\n  )\n\n  const toggleAllRowsExpanded = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsExpanded, value }),\n    [dispatch]\n  )\n\n  const expandedRows = React.useMemo(() => {\n    if (paginateExpandedRows) {\n      return expandRows(rows, { manualExpandedKey, expanded, expandSubRows })\n    }\n\n    return rows\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows])\n\n  const expandedDepth = React.useMemo(() => findExpandedDepth(expanded), [\n    expanded,\n  ])\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsExpandedProps = makePropGetter(\n    getHooks().getToggleAllRowsExpandedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    preExpandedRows: rows,\n    expandedRows,\n    rows: expandedRows,\n    expandedDepth,\n    isAllRowsExpanded,\n    toggleRowExpanded,\n    toggleAllRowsExpanded,\n    getToggleAllRowsExpandedProps,\n  })\n}\n\nfunction prepareRow(row, { instance: { getHooks }, instance }) {\n  row.toggleRowExpanded = set => instance.toggleRowExpanded(row.id, set)\n\n  row.getToggleRowExpandedProps = makePropGetter(\n    getHooks().getToggleRowExpandedProps,\n    {\n      instance,\n      row,\n    }\n  )\n}\n\nfunction findExpandedDepth(expanded) {\n  let maxDepth = 0\n\n  Object.keys(expanded).forEach(id => {\n    const splitId = id.split('.')\n    maxDepth = Math.max(maxDepth, splitId.length)\n  })\n\n  return maxDepth\n}\n","export const text = (rows, ids, filterValue) => {\n  rows = rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return String(rowValue)\n        .toLowerCase()\n        .includes(String(filterValue).toLowerCase())\n    })\n  })\n  return rows\n}\n\ntext.autoRemove = val => !val\n\nexport const exactText = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase()\n        : true\n    })\n  })\n}\n\nexactText.autoRemove = val => !val\n\nexport const exactTextCase = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue) === String(filterValue)\n        : true\n    })\n  })\n}\n\nexactTextCase.autoRemove = val => !val\n\nexport const includes = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return filterValue.includes(rowValue)\n    })\n  })\n}\n\nincludes.autoRemove = val => !val || !val.length\n\nexport const includesAll = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.every(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesAll.autoRemove = val => !val || !val.length\n\nexport const exact = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue === filterValue\n    })\n  })\n}\n\nexact.autoRemove = val => typeof val === 'undefined'\n\nexport const equals = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      // eslint-disable-next-line eqeqeq\n      return rowValue == filterValue\n    })\n  })\n}\n\nequals.autoRemove = val => val == null\n\nexport const between = (rows, ids, filterValue) => {\n  let [min, max] = filterValue || []\n\n  min = typeof min === 'number' ? min : -Infinity\n  max = typeof max === 'number' ? max : Infinity\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue >= min && rowValue <= max\n    })\n  })\n}\n\nbetween.autoRemove = val =>\n  !val || (typeof val[0] !== 'number' && typeof val[1] !== 'number')\n","import React from 'react'\n\nimport {\n  getFirstDefined,\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n} from '../utils'\n\nimport {\n  actions,\n  useGetLatest,\n  functionalUpdate,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetFilters = 'resetFilters'\nactions.setFilter = 'setFilter'\nactions.setAllFilters = 'setAllFilters'\n\nexport const useFilters = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseFilters.pluginName = 'useFilters'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      filters: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetFilters) {\n    return {\n      ...state,\n      filters: instance.initialState.filters || [],\n    }\n  }\n\n  if (action.type === actions.setFilter) {\n    const { columnId, filterValue } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    const column = allColumns.find(d => d.id === columnId)\n\n    if (!column) {\n      throw new Error(\n        `React-Table: Could not find a column with id: ${columnId}`\n      )\n    }\n\n    const filterMethod = getFilterMethod(\n      column.filter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const previousfilter = state.filters.find(d => d.id === columnId)\n\n    const newFilter = functionalUpdate(\n      filterValue,\n      previousfilter && previousfilter.value\n    )\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {\n      return {\n        ...state,\n        filters: state.filters.filter(d => d.id !== columnId),\n      }\n    }\n\n    if (previousfilter) {\n      return {\n        ...state,\n        filters: state.filters.map(d => {\n          if (d.id === columnId) {\n            return { id: columnId, value: newFilter }\n          }\n          return d\n        }),\n      }\n    }\n\n    return {\n      ...state,\n      filters: [...state.filters, { id: columnId, value: newFilter }],\n    }\n  }\n\n  if (action.type === actions.setAllFilters) {\n    const { filters } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    return {\n      ...state,\n      // Filter out undefined values\n      filters: functionalUpdate(filters, state.filters).filter(filter => {\n        const column = allColumns.find(d => d.id === filter.id)\n        const filterMethod = getFilterMethod(\n          column.filter,\n          userFilterTypes || {},\n          filterTypes\n        )\n\n        if (\n          shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)\n        ) {\n          return false\n        }\n        return true\n      }),\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    manualFilters,\n    defaultCanFilter = false,\n    disableFilters,\n    state: { filters },\n    dispatch,\n    autoResetFilters = true,\n  } = instance\n\n  const setFilter = React.useCallback(\n    (columnId, filterValue) => {\n      dispatch({ type: actions.setFilter, columnId, filterValue })\n    },\n    [dispatch]\n  )\n\n  const setAllFilters = React.useCallback(\n    filters => {\n      dispatch({\n        type: actions.setAllFilters,\n        filters,\n      })\n    },\n    [dispatch]\n  )\n\n  allColumns.forEach(column => {\n    const {\n      id,\n      accessor,\n      defaultCanFilter: columnDefaultCanFilter,\n      disableFilters: columnDisableFilters,\n    } = column\n\n    // Determine if a column is filterable\n    column.canFilter = accessor\n      ? getFirstDefined(\n          columnDisableFilters === true ? false : undefined,\n          disableFilters === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false)\n\n    // Provide the column a way of updating the filter value\n    column.setFilter = val => setFilter(column.id, val)\n\n    // Provide the current filter value to the column for\n    // convenience\n    const found = filters.find(d => d.id === id)\n    column.filterValue = found && found.value\n  })\n\n  const [\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualFilters || !filters.length) {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    // Filters top level and nested rows\n    const filterRows = (rows, depth = 0) => {\n      let filteredRows = rows\n\n      filteredRows = filters.reduce(\n        (filteredSoFar, { id: columnId, value: filterValue }) => {\n          // Find the filters column\n          const column = allColumns.find(d => d.id === columnId)\n\n          if (!column) {\n            return filteredSoFar\n          }\n\n          if (depth === 0) {\n            column.preFilteredRows = filteredSoFar\n          }\n\n          const filterMethod = getFilterMethod(\n            column.filter,\n            userFilterTypes || {},\n            filterTypes\n          )\n\n          if (!filterMethod) {\n            console.warn(\n              `Could not find a valid 'column.filter' for column with the ID: ${column.id}.`\n            )\n            return filteredSoFar\n          }\n\n          // Pass the rows, id, filterValue and column to the filterMethod\n          // to get the filtered rows back\n          column.filteredRows = filterMethod(\n            filteredSoFar,\n            [columnId],\n            filterValue\n          )\n\n          return column.filteredRows\n        },\n        rows\n      )\n\n      // Apply the filter to any subRows\n      // We technically could do this recursively in the above loop,\n      // but that would severely hinder the API for the user, since they\n      // would be required to do that recursion in some scenarios\n      filteredRows = filteredRows.map(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n        if (!row.subRows) {\n          return row\n        }\n        return {\n          ...row,\n          subRows:\n            row.subRows && row.subRows.length > 0\n              ? filterRows(row.subRows, depth + 1)\n              : row.subRows,\n        }\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualFilters,\n    filters,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userFilterTypes,\n  ])\n\n  React.useMemo(() => {\n    // Now that each filtered column has it's partially filtered rows,\n    // lets assign the final filtered rows to all of the other columns\n    const nonFilteredColumns = allColumns.filter(\n      column => !filters.find(d => d.id === column.id)\n    )\n\n    // This essentially enables faceted filter options to be built easily\n    // using every column's preFilteredRows value\n    nonFilteredColumns.forEach(column => {\n      column.preFilteredRows = filteredRows\n      column.filteredRows = filteredRows\n    })\n  }, [filteredRows, filters, allColumns])\n\n  const getAutoResetFilters = useGetLatest(autoResetFilters)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetFilters()) {\n      dispatch({ type: actions.resetFilters })\n    }\n  }, [dispatch, manualFilters ? null : data])\n\n  Object.assign(instance, {\n    preFilteredRows: rows,\n    preFilteredFlatRows: flatRows,\n    preFilteredRowsById: rowsById,\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n    rows: filteredRows,\n    flatRows: filteredFlatRows,\n    rowsById: filteredRowsById,\n    setFilter,\n    setAllFilters,\n  })\n}\n","import React from 'react'\n\nimport { getFilterMethod, shouldAutoRemoveFilter } from '../utils'\n\nimport {\n  actions,\n  useMountedLayoutEffect,\n  functionalUpdate,\n  useGetLatest,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetGlobalFilter = 'resetGlobalFilter'\nactions.setGlobalFilter = 'setGlobalFilter'\n\nexport const useGlobalFilter = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseGlobalFilter.pluginName = 'useGlobalFilter'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.resetGlobalFilter) {\n    return {\n      ...state,\n      globalFilter: instance.initialState.globalFilter || undefined,\n    }\n  }\n\n  if (action.type === actions.setGlobalFilter) {\n    const { filterValue } = action\n    const { userFilterTypes } = instance\n\n    const filterMethod = getFilterMethod(\n      instance.globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const newFilter = functionalUpdate(filterValue, state.globalFilter)\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n      const { globalFilter, ...stateWithoutGlobalFilter } = state\n      return stateWithoutGlobalFilter\n    }\n\n    return {\n      ...state,\n      globalFilter: newFilter,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    globalFilter,\n    manualGlobalFilter,\n    state: { globalFilter: globalFilterValue },\n    dispatch,\n    autoResetGlobalFilter = true,\n  } = instance\n\n  const setGlobalFilter = React.useCallback(\n    filterValue => {\n      dispatch({ type: actions.setGlobalFilter, filterValue })\n    },\n    [dispatch]\n  )\n\n  // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  const [\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    const filterMethod = getFilterMethod(\n      globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    if (!filterMethod) {\n      console.warn(`Could not find a valid 'globalFilter' option.`)\n      return rows\n    }\n\n    // Filters top level and nested rows\n    const filterRows = filteredRows => {\n      return filterMethod(\n        filteredRows,\n        allColumns.map(d => d.id),\n        globalFilterValue\n      ).map(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n\n        return {\n          ...row,\n          subRows:\n            row.subRows && row.subRows.length\n              ? filterRows(row.subRows)\n              : row.subRows,\n        }\n      })\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualGlobalFilter,\n    globalFilterValue,\n    globalFilter,\n    userFilterTypes,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n  ])\n\n  const getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGlobalFilter()) {\n      dispatch({ type: actions.resetGlobalFilter })\n    }\n  }, [dispatch, manualGlobalFilter ? null : data])\n\n  Object.assign(instance, {\n    preGlobalFilteredRows: rows,\n    preGlobalFilteredFlatRows: flatRows,\n    preGlobalFilteredRowsById: rowsById,\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n    rows: globalFilteredRows,\n    flatRows: globalFilteredFlatRows,\n    rowsById: globalFilteredRowsById,\n    setGlobalFilter,\n  })\n}\n","import React from 'react'\n\nimport * as aggregations from '../aggregations'\n\nimport { getFirstDefined, flattenBy } from '../utils'\n\nimport {\n  actions,\n  makePropGetter,\n  defaultGroupByFn,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst emptyArray = []\nconst emptyObject = {}\n\n// Actions\nactions.resetGroupBy = 'resetGroupBy'\nactions.toggleGroupBy = 'toggleGroupBy'\n\nexport const useGroupBy = hooks => {\n  hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.groupBy,\n  ])\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseGroupBy.pluginName = 'useGroupBy'\n\nconst defaultGetGroupByToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canGroupBy\n      ? e => {\n          e.persist()\n          header.toggleGroupBy()\n        }\n      : undefined,\n    style: {\n      cursor: header.canGroupBy ? 'pointer' : undefined,\n    },\n    title: 'Toggle GroupBy',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      groupBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetGroupBy) {\n    return {\n      ...state,\n      groupBy: instance.initialState.groupBy || [],\n    }\n  }\n\n  if (action.type === actions.toggleGroupBy) {\n    const { columnId, value: setGroupBy } = action\n\n    const resolvedGroupBy =\n      typeof setGroupBy !== 'undefined'\n        ? setGroupBy\n        : !state.groupBy.includes(columnId)\n\n    if (resolvedGroupBy) {\n      return {\n        ...state,\n        groupBy: [...state.groupBy, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      groupBy: state.groupBy.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { groupBy },\n    },\n  }\n) {\n  // Sort grouped columns to the start of the column list\n  // before the headers are built\n\n  const groupByColumns = groupBy\n    .map(g => columns.find(col => col.id === g))\n    .filter(Boolean)\n\n  const nonGroupByColumns = columns.filter(col => !groupBy.includes(col.id))\n\n  columns = [...groupByColumns, ...nonGroupByColumns]\n\n  columns.forEach(column => {\n    column.isGrouped = groupBy.includes(column.id)\n    column.groupedIndex = groupBy.indexOf(column.id)\n  })\n\n  return columns\n}\n\nconst defaultUserAggregations = {}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    flatHeaders,\n    groupByFn = defaultGroupByFn,\n    manualGroupBy,\n    aggregations: userAggregations = defaultUserAggregations,\n    plugins,\n    state: { groupBy },\n    dispatch,\n    autoResetGroupBy = true,\n    disableGroupBy,\n    defaultCanGroupBy,\n    getHooks,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useFilters'], 'useGroupBy')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultGroupBy: defaultColumnGroupBy,\n      disableGroupBy: columnDisableGroupBy,\n    } = column\n\n    column.canGroupBy = accessor\n      ? getFirstDefined(\n          column.canGroupBy,\n          columnDisableGroupBy === true ? false : undefined,\n          disableGroupBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canGroupBy,\n          defaultColumnGroupBy,\n          defaultCanGroupBy,\n          false\n        )\n\n    if (column.canGroupBy) {\n      column.toggleGroupBy = () => instance.toggleGroupBy(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const toggleGroupBy = React.useCallback(\n    (columnId, value) => {\n      dispatch({ type: actions.toggleGroupBy, columnId, value })\n    },\n    [dispatch]\n  )\n\n  flatHeaders.forEach(header => {\n    header.getGroupByToggleProps = makePropGetter(\n      getHooks().getGroupByToggleProps,\n      { instance: getInstance(), header }\n    )\n  })\n\n  const [\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n  ] = React.useMemo(() => {\n    if (manualGroupBy || !groupBy.length) {\n      return [\n        rows,\n        flatRows,\n        rowsById,\n        emptyArray,\n        emptyObject,\n        flatRows,\n        rowsById,\n      ]\n    }\n\n    // Ensure that the list of filtered columns exist\n    const existingGroupBy = groupBy.filter(g =>\n      allColumns.find(col => col.id === g)\n    )\n\n    // Find the columns that can or are aggregating\n    // Uses each column to aggregate rows into a single value\n    const aggregateRowsToValues = (leafRows, groupedRows, depth) => {\n      const values = {}\n\n      allColumns.forEach(column => {\n        // Don't aggregate columns that are in the groupBy\n        if (existingGroupBy.includes(column.id)) {\n          values[column.id] = groupedRows[0]\n            ? groupedRows[0].values[column.id]\n            : null\n          return\n        }\n\n        // Get the columnValues to aggregate\n        const groupedValues = groupedRows.map(row => row.values[column.id])\n\n        // Get the columnValues to aggregate\n        const leafValues = leafRows.map(row => {\n          let columnValue = row.values[column.id]\n\n          if (!depth && column.aggregatedValue) {\n            const aggregateValueFn =\n              typeof column.aggregateValue === 'function'\n                ? column.aggregateValue\n                : userAggregations[column.aggregateValue] ||\n                  aggregations[column.aggregateValue]\n\n            if (!aggregateValueFn) {\n              console.info({ column })\n              throw new Error(\n                `React Table: Invalid column.aggregateValue option for column listed above`\n              )\n            }\n\n            columnValue = aggregateValueFn(columnValue, row, column)\n          }\n          return columnValue\n        })\n\n        // Aggregate the values\n        let aggregateFn =\n          typeof column.aggregate === 'function'\n            ? column.aggregate\n            : userAggregations[column.aggregate] ||\n              aggregations[column.aggregate]\n\n        if (aggregateFn) {\n          values[column.id] = aggregateFn(leafValues, groupedValues)\n        } else if (column.aggregate) {\n          console.info({ column })\n          throw new Error(\n            `React Table: Invalid column.aggregate option for column listed above`\n          )\n        } else {\n          values[column.id] = null\n        }\n      })\n\n      return values\n    }\n\n    let groupedFlatRows = []\n    const groupedRowsById = {}\n    const onlyGroupedFlatRows = []\n    const onlyGroupedRowsById = {}\n    const nonGroupedFlatRows = []\n    const nonGroupedRowsById = {}\n\n    // Recursively group the data\n    const groupUpRecursively = (rows, depth = 0, parentId) => {\n      // This is the last level, just return the rows\n      if (depth === existingGroupBy.length) {\n        return rows\n      }\n\n      const columnId = existingGroupBy[depth]\n\n      // Group the rows together for this level\n      let rowGroupsMap = groupByFn(rows, columnId)\n\n      // Peform aggregations for each group\n      const aggregatedGroupedRows = Object.entries(rowGroupsMap).map(\n        ([groupByVal, groupedRows], index) => {\n          let id = `${columnId}:${groupByVal}`\n          id = parentId ? `${parentId}>${id}` : id\n\n          // First, Recurse to group sub rows before aggregation\n          const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n          // Flatten the leaf rows of the rows in this group\n          const leafRows = depth\n            ? flattenBy(groupedRows, 'leafRows')\n            : groupedRows\n\n          const values = aggregateRowsToValues(leafRows, groupedRows, depth)\n\n          const row = {\n            id,\n            isGrouped: true,\n            groupByID: columnId,\n            groupByVal,\n            values,\n            subRows,\n            leafRows,\n            depth,\n            index,\n          }\n\n          subRows.forEach(subRow => {\n            groupedFlatRows.push(subRow)\n            groupedRowsById[subRow.id] = subRow\n            if (subRow.isGrouped) {\n              onlyGroupedFlatRows.push(subRow)\n              onlyGroupedRowsById[subRow.id] = subRow\n            } else {\n              nonGroupedFlatRows.push(subRow)\n              nonGroupedRowsById[subRow.id] = subRow\n            }\n          })\n\n          return row\n        }\n      )\n\n      return aggregatedGroupedRows\n    }\n\n    const groupedRows = groupUpRecursively(rows)\n\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow)\n      groupedRowsById[subRow.id] = subRow\n      if (subRow.isGrouped) {\n        onlyGroupedFlatRows.push(subRow)\n        onlyGroupedRowsById[subRow.id] = subRow\n      } else {\n        nonGroupedFlatRows.push(subRow)\n        nonGroupedRowsById[subRow.id] = subRow\n      }\n    })\n\n    // Assign the new data\n    return [\n      groupedRows,\n      groupedFlatRows,\n      groupedRowsById,\n      onlyGroupedFlatRows,\n      onlyGroupedRowsById,\n      nonGroupedFlatRows,\n      nonGroupedRowsById,\n    ]\n  }, [\n    manualGroupBy,\n    groupBy,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userAggregations,\n    groupByFn,\n  ])\n\n  const getAutoResetGroupBy = useGetLatest(autoResetGroupBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGroupBy()) {\n      dispatch({ type: actions.resetGroupBy })\n    }\n  }, [dispatch, manualGroupBy ? null : data])\n\n  Object.assign(instance, {\n    preGroupedRows: rows,\n    preGroupedFlatRow: flatRows,\n    preGroupedRowsById: rowsById,\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    rowsById: groupedRowsById,\n    toggleGroupBy,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the groupBy and the pivot cell for the row\n    cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID\n    // Placeholder cells are any columns in the groupBy that are not grouped\n    cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped\n    // Aggregated cells are not grouped, not repeated, but still have subRows\n    cell.isAggregated = !cell.isGrouped && !cell.isPlaceholder && row.canExpand\n  })\n}\n","import React from 'react'\n\nimport {\n  actions,\n  ensurePluginOrder,\n  defaultColumn,\n  makePropGetter,\n  defaultOrderByFn,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, isFunction } from '../utils'\n\nimport * as sortTypes from '../sortTypes'\n\n// Actions\nactions.resetSortBy = 'resetSortBy'\nactions.toggleSortBy = 'toggleSortBy'\nactions.clearSortBy = 'clearSortBy'\n\ndefaultColumn.sortType = 'alphanumeric'\ndefaultColumn.sortDescFirst = false\n\nexport const useSortBy = hooks => {\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseSortBy.pluginName = 'useSortBy'\n\nconst defaultGetSortByToggleProps = (props, { instance, column }) => {\n  const { isMultiSortEvent = e => e.shiftKey } = instance\n\n  return [\n    props,\n    {\n      onClick: column.canSort\n        ? e => {\n            e.persist()\n            column.toggleSortBy(\n              undefined,\n              !instance.disableMultiSort && isMultiSortEvent(e)\n            )\n          }\n        : undefined,\n      style: {\n        cursor: column.canSort ? 'pointer' : undefined,\n      },\n      title: column.canSort ? 'Toggle SortBy' : undefined,\n    },\n  ]\n}\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      sortBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSortBy) {\n    return {\n      ...state,\n      sortBy: instance.initialState.sortBy || [],\n    }\n  }\n\n  if (action.type === actions.clearSortBy) {\n    const { sortBy } = state\n    const newSortBy = sortBy.filter(d => d.id !== action.columnId)\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n\n  if (action.type === actions.toggleSortBy) {\n    const { columnId, desc, multi } = action\n\n    const {\n      allColumns,\n      disableMultiSort,\n      disableSortRemove,\n      disableMultiRemove,\n      maxMultiSortColCount = Number.MAX_SAFE_INTEGER,\n    } = instance\n\n    const { sortBy } = state\n\n    // Find the column for this columnId\n    const column = allColumns.find(d => d.id === columnId)\n    const { sortDescFirst } = column\n\n    // Find any existing sortBy for this column\n    const existingSortBy = sortBy.find(d => d.id === columnId)\n    const existingIndex = sortBy.findIndex(d => d.id === columnId)\n    const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n    let newSortBy = []\n\n    // What should we do with this sort action?\n    let sortAction\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'add'\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== sortBy.length - 1) {\n        sortAction = 'replace'\n      } else if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'replace'\n      }\n    }\n\n    // Handle toggle states that will remove the sortBy\n    if (\n      sortAction === 'toggle' && // Must be toggling\n      !disableSortRemove && // If disableSortRemove, disable in general\n      !hasDescDefined && // Must not be setting desc\n      (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove\n      ((existingSortBy && // Finally, detect if it should indeed be removed\n        existingSortBy.desc &&\n        !sortDescFirst) ||\n        (!existingSortBy.desc && sortDescFirst))\n    ) {\n      sortAction = 'remove'\n    }\n\n    if (sortAction === 'replace') {\n      newSortBy = [\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n    } else if (sortAction === 'add') {\n      newSortBy = [\n        ...sortBy,\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n      // Take latest n columns\n      newSortBy.splice(0, newSortBy.length - maxMultiSortColCount)\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      newSortBy = sortBy.map(d => {\n        if (d.id === columnId) {\n          return {\n            ...d,\n            desc: hasDescDefined ? desc : !existingSortBy.desc,\n          }\n        }\n        return d\n      })\n    } else if (sortAction === 'remove') {\n      newSortBy = sortBy.filter(d => d.id !== columnId)\n    }\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn = defaultOrderByFn,\n    sortTypes: userSortTypes,\n    manualSortBy,\n    defaultCanSort,\n    disableSortBy,\n    flatHeaders,\n    state: { sortBy },\n    dispatch,\n    plugins,\n    getHooks,\n    autoResetSortBy = true,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'],\n    'useSortBy'\n  )\n\n  // Updates sorting based on a columnId, desc flag and multi flag\n  const toggleSortBy = React.useCallback(\n    (columnId, desc, multi) => {\n      dispatch({ type: actions.toggleSortBy, columnId, desc, multi })\n    },\n    [dispatch]\n  )\n\n  // use reference to avoid memory leak in #1608\n  const getInstance = useGetLatest(instance)\n\n  // Add the getSortByToggleProps method to columns and headers\n  flatHeaders.forEach(column => {\n    const {\n      accessor,\n      canSort: defaultColumnCanSort,\n      disableSortBy: columnDisableSortBy,\n      id,\n    } = column\n\n    const canSort = accessor\n      ? getFirstDefined(\n          columnDisableSortBy === true ? false : undefined,\n          disableSortBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(defaultCanSort, defaultColumnCanSort, false)\n\n    column.canSort = canSort\n\n    if (column.canSort) {\n      column.toggleSortBy = (desc, multi) =>\n        toggleSortBy(column.id, desc, multi)\n\n      column.clearSortBy = () => {\n        dispatch({ type: actions.clearSortBy, columnId: column.id })\n      }\n    }\n\n    column.getSortByToggleProps = makePropGetter(\n      getHooks().getSortByToggleProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n\n    const columnSort = sortBy.find(d => d.id === id)\n    column.isSorted = !!columnSort\n    column.sortedIndex = sortBy.findIndex(d => d.id === id)\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined\n  })\n\n  const [sortedRows, sortedFlatRows] = React.useMemo(() => {\n    if (manualSortBy || !sortBy.length) {\n      return [rows, flatRows]\n    }\n\n    const sortedFlatRows = []\n\n    // Filter out sortBys that correspond to non existing columns\n    const availableSortBy = sortBy.filter(sort =>\n      allColumns.find(col => col.id === sort.id)\n    )\n\n    const sortData = rows => {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = orderByFn(\n        rows,\n        availableSortBy.map(sort => {\n          // Support custom sorting methods for each column\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (!column) {\n            throw new Error(\n              `React-Table: Could not find a column with id: ${sort.id} while sorting`\n            )\n          }\n\n          const { sortType } = column\n\n          // Look up sortBy functions in this order:\n          // column function\n          // column string lookup on user sortType\n          // column string lookup on built-in sortType\n          // default function\n          // default string lookup on user sortType\n          // default string lookup on built-in sortType\n          const sortMethod =\n            isFunction(sortType) ||\n            (userSortTypes || {})[sortType] ||\n            sortTypes[sortType]\n\n          if (!sortMethod) {\n            throw new Error(\n              `React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`\n            )\n          }\n\n          // Return the correct sortFn.\n          // This function should always return in ascending order\n          return (a, b) => sortMethod(a, b, sort.id, sort.desc)\n        }),\n        // Map the directions\n        availableSortBy.map(sort => {\n          // Detect and use the sortInverted option\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (column && column.sortInverted) {\n            return sort.desc\n          }\n\n          return !sort.desc\n        })\n      )\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        sortedFlatRows.push(row)\n        if (!row.subRows || row.subRows.length <= 1) {\n          return\n        }\n        row.subRows = sortData(row.subRows)\n      })\n\n      return sortedData\n    }\n\n    return [sortData(rows), sortedFlatRows]\n  }, [\n    manualSortBy,\n    sortBy,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn,\n    userSortTypes,\n  ])\n\n  const getAutoResetSortBy = useGetLatest(autoResetSortBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSortBy()) {\n      dispatch({ type: actions.resetSortBy })\n    }\n  }, [manualSortBy ? null : data])\n\n  Object.assign(instance, {\n    preSortedRows: rows,\n    preSortedFlatRows: flatRows,\n    sortedRows,\n    sortedFlatRows,\n    rows: sortedRows,\n    flatRows: sortedFlatRows,\n    toggleSortBy,\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  actions,\n  ensurePluginOrder,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { expandRows } from '../utils'\n\nconst pluginName = 'usePagination'\n\n// Actions\nactions.resetPage = 'resetPage'\nactions.gotoPage = 'gotoPage'\nactions.setPageSize = 'setPageSize'\n\nexport const usePagination = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nusePagination.pluginName = pluginName\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pageSize: 10,\n      pageIndex: 0,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPage) {\n    return {\n      ...state,\n      pageIndex: instance.initialState.pageIndex || 0,\n    }\n  }\n\n  if (action.type === actions.gotoPage) {\n    const { pageCount } = instance\n    const newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex)\n\n    if (newPageIndex < 0 || newPageIndex > pageCount - 1) {\n      return state\n    }\n    return {\n      ...state,\n      pageIndex: newPageIndex,\n    }\n  }\n\n  if (action.type === actions.setPageSize) {\n    const { pageSize } = action\n    const topRowIndex = state.pageSize * state.pageIndex\n    const pageIndex = Math.floor(topRowIndex / pageSize)\n\n    return {\n      ...state,\n      pageIndex,\n      pageSize,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    rows,\n    autoResetPage = true,\n    manualExpandedKey = 'expanded',\n    plugins,\n    pageCount: userPageCount,\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    state: {\n      pageSize,\n      pageIndex,\n      expanded,\n      globalFilter,\n      filters,\n      groupBy,\n      sortBy,\n    },\n    dispatch,\n    data,\n    manualPagination,\n    manualGlobalFilter,\n    manualFilters,\n    manualGroupBy,\n    manualSortBy,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'],\n    'usePagination'\n  )\n\n  const getAutoResetPage = useGetLatest(autoResetPage)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPage()) {\n      dispatch({ type: actions.resetPage })\n    }\n  }, [\n    dispatch,\n    manualPagination ? null : data,\n    manualGlobalFilter ? null : globalFilter,\n    manualFilters ? null : filters,\n    manualGroupBy ? null : groupBy,\n    manualSortBy ? null : sortBy,\n  ])\n\n  const pageCount = manualPagination\n    ? userPageCount\n    : Math.ceil(rows.length / pageSize)\n\n  const pageOptions = React.useMemo(\n    () => (pageCount > 0 ? [...new Array(pageCount)].map((d, i) => i) : []),\n    [pageCount]\n  )\n\n  const page = React.useMemo(() => {\n    let page\n\n    if (manualPagination) {\n      page = rows\n    } else {\n      const pageStart = pageSize * pageIndex\n      const pageEnd = pageStart + pageSize\n\n      page = rows.slice(pageStart, pageEnd)\n    }\n\n    if (paginateExpandedRows) {\n      return page\n    }\n\n    return expandRows(page, { manualExpandedKey, expanded, expandSubRows })\n  }, [\n    expandSubRows,\n    expanded,\n    manualExpandedKey,\n    manualPagination,\n    pageIndex,\n    pageSize,\n    paginateExpandedRows,\n    rows,\n  ])\n\n  const canPreviousPage = pageIndex > 0\n  const canNextPage = pageCount === -1 || pageIndex < pageCount - 1\n\n  const gotoPage = React.useCallback(\n    pageIndex => {\n      dispatch({ type: actions.gotoPage, pageIndex })\n    },\n    [dispatch]\n  )\n\n  const previousPage = React.useCallback(() => {\n    return gotoPage(old => old - 1)\n  }, [gotoPage])\n\n  const nextPage = React.useCallback(() => {\n    return gotoPage(old => old + 1)\n  }, [gotoPage])\n\n  const setPageSize = React.useCallback(\n    pageSize => {\n      dispatch({ type: actions.setPageSize, pageSize })\n    },\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    pageOptions,\n    pageCount,\n    page,\n    canPreviousPage,\n    canNextPage,\n    gotoPage,\n    previousPage,\n    nextPage,\n    setPageSize,\n  })\n}\n","/* istanbul ignore file */\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { flattenColumns, getFirstDefined } from '../utils'\n\n// Actions\nactions.resetPivot = 'resetPivot'\nactions.togglePivot = 'togglePivot'\n\nexport const _UNSTABLE_usePivotColumns = hooks => {\n  hooks.getPivotToggleProps = [defaultGetPivotToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceAfterData.push(useInstanceAfterData)\n  hooks.allColumns.push(allColumns)\n  hooks.accessValue.push(accessValue)\n  hooks.materializedColumns.push(materializedColumns)\n  hooks.materializedColumnsDeps.push(materializedColumnsDeps)\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.visibleColumnsDeps.push(visibleColumnsDeps)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\n_UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns'\n\nconst defaultPivotColumns = []\n\nconst defaultGetPivotToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canPivot\n      ? e => {\n          e.persist()\n          header.togglePivot()\n        }\n      : undefined,\n    style: {\n      cursor: header.canPivot ? 'pointer' : undefined,\n    },\n    title: 'Toggle Pivot',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pivotColumns: defaultPivotColumns,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPivot) {\n    return {\n      ...state,\n      pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns,\n    }\n  }\n\n  if (action.type === actions.togglePivot) {\n    const { columnId, value: setPivot } = action\n\n    const resolvedPivot =\n      typeof setPivot !== 'undefined'\n        ? setPivot\n        : !state.pivotColumns.includes(columnId)\n\n    if (resolvedPivot) {\n      return {\n        ...state,\n        pivotColumns: [...state.pivotColumns, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      pivotColumns: state.pivotColumns.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction useInstanceAfterData(instance) {\n  instance.allColumns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n  })\n}\n\nfunction allColumns(columns, { instance }) {\n  columns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n    column.uniqueValues = new Set()\n  })\n  return columns\n}\n\nfunction accessValue(value, { column }) {\n  if (column.uniqueValues && typeof value !== 'undefined') {\n    column.uniqueValues.add(value)\n  }\n  return value\n}\n\nfunction materializedColumns(materialized, { instance }) {\n  const { allColumns, state } = instance\n\n  if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\n    return materialized\n  }\n\n  const pivotColumns = state.pivotColumns\n    .map(id => allColumns.find(d => d.id === id))\n    .filter(Boolean)\n\n  const sourceColumns = allColumns.filter(\n    d =>\n      !d.isPivotSource &&\n      !state.groupBy.includes(d.id) &&\n      !state.pivotColumns.includes(d.id)\n  )\n\n  const buildPivotColumns = (depth = 0, parent, pivotFilters = []) => {\n    const pivotColumn = pivotColumns[depth]\n\n    if (!pivotColumn) {\n      return sourceColumns.map(sourceColumn => {\n        // TODO: We could offer support here for renesting pivoted\n        // columns inside copies of their header groups. For now,\n        // that seems like it would be (1) overkill on nesting, considering\n        // you already get nesting for every pivot level and (2)\n        // really hard. :)\n\n        return {\n          ...sourceColumn,\n          canPivot: false,\n          isPivoted: true,\n          parent,\n          depth: depth,\n          id: `${parent ? `${parent.id}.${sourceColumn.id}` : sourceColumn.id}`,\n          accessor: (originalRow, i, row) => {\n            if (pivotFilters.every(filter => filter(row))) {\n              return row.values[sourceColumn.id]\n            }\n          },\n        }\n      })\n    }\n\n    const uniqueValues = Array.from(pivotColumn.uniqueValues).sort()\n\n    return uniqueValues.map(uniqueValue => {\n      const columnGroup = {\n        ...pivotColumn,\n        Header:\n          pivotColumn.PivotHeader || typeof pivotColumn.header === 'string'\n            ? `${pivotColumn.Header}: ${uniqueValue}`\n            : uniqueValue,\n        isPivotGroup: true,\n        parent,\n        depth,\n        id: parent\n          ? `${parent.id}.${pivotColumn.id}.${uniqueValue}`\n          : `${pivotColumn.id}.${uniqueValue}`,\n        pivotValue: uniqueValue,\n      }\n\n      columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [\n        ...pivotFilters,\n        row => row.values[pivotColumn.id] === uniqueValue,\n      ])\n\n      return columnGroup\n    })\n  }\n\n  const newMaterialized = flattenColumns(buildPivotColumns())\n\n  return [...materialized, ...newMaterialized]\n}\n\nfunction materializedColumnsDeps(\n  deps,\n  {\n    instance: {\n      state: { pivotColumns, groupBy },\n    },\n  }\n) {\n  return [...deps, pivotColumns, groupBy]\n}\n\nfunction visibleColumns(visibleColumns, { instance: { state } }) {\n  visibleColumns = visibleColumns.filter(d => !d.isPivotSource)\n\n  if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\n    visibleColumns = visibleColumns.filter(\n      column => column.isGrouped || column.isPivoted\n    )\n  }\n\n  return visibleColumns\n}\n\nfunction visibleColumnsDeps(deps, { instance }) {\n  return [...deps, instance.state.pivotColumns, instance.state.groupBy]\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    allColumns,\n    flatHeaders,\n    // pivotFn = defaultPivotFn,\n    // manualPivot,\n    getHooks,\n    plugins,\n    dispatch,\n    autoResetPivot = true,\n    manaulPivot,\n    disablePivot,\n    defaultCanPivot,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultPivot: defaultColumnPivot,\n      disablePivot: columnDisablePivot,\n    } = column\n\n    column.canPivot = accessor\n      ? getFirstDefined(\n          column.canPivot,\n          columnDisablePivot === true ? false : undefined,\n          disablePivot === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canPivot,\n          defaultColumnPivot,\n          defaultCanPivot,\n          false\n        )\n\n    if (column.canPivot) {\n      column.togglePivot = () => instance.togglePivot(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const togglePivot = (columnId, value) => {\n    dispatch({ type: actions.togglePivot, columnId, value })\n  }\n\n  flatHeaders.forEach(header => {\n    header.getPivotToggleProps = makePropGetter(\n      getHooks().getPivotToggleProps,\n      {\n        instance: getInstance(),\n        header,\n      }\n    )\n  })\n\n  const getAutoResetPivot = useGetLatest(autoResetPivot)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPivot()) {\n      dispatch({ type: actions.resetPivot })\n    }\n  }, [dispatch, manaulPivot ? null : columns])\n\n  Object.assign(instance, {\n    togglePivot,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the pivotColumns and the pivot cell for the row\n    cell.isPivoted = cell.column.isPivoted\n  })\n}\n","import React from 'react'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nconst pluginName = 'useRowSelect'\n\n// Actions\nactions.resetSelectedRows = 'resetSelectedRows'\nactions.toggleAllRowsSelected = 'toggleAllRowsSelected'\nactions.toggleRowSelected = 'toggleRowSelected'\n\nexport const useRowSelect = hooks => {\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps]\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowSelect.pluginName = pluginName\n\nconst defaultGetToggleRowSelectedProps = (props, { instance, row }) => {\n  const { manualRowSelectedKey = 'isSelected' } = instance\n  let checked = false\n\n  if (row.original && row.original[manualRowSelectedKey]) {\n    checked = true\n  } else {\n    checked = row.isSelected\n  }\n\n  return [\n    props,\n    {\n      onChange: e => {\n        row.toggleRowSelected(e.target.checked)\n      },\n      style: {\n        cursor: 'pointer',\n      },\n      checked,\n      title: 'Toggle Row Selected',\n      indeterminate: row.isSomeSelected,\n    },\n  ]\n}\n\nconst defaultGetToggleAllRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleAllRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllRowsSelected,\n    title: 'Toggle All Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllRowsSelected &&\n        Object.keys(instance.state.selectedRowIds).length\n    ),\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      selectedRowIds: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return {\n      ...state,\n      selectedRowIds: instance.initialState.selectedRowIds || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      isAllRowsSelected,\n      rowsById,\n      nonGroupedRowsById = rowsById,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected\n\n    if (selectAll) {\n      const selectedRowIds = {}\n\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        selectedRowIds[rowId] = true\n      })\n\n      return {\n        ...state,\n        selectedRowIds,\n      }\n    }\n\n    return {\n      ...state,\n      selectedRowIds: {},\n    }\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    const { id, value: setSelected } = action\n    const { rowsById, selectSubRows = true } = instance\n\n    // Join the ids of deep rows\n    // to make a key, then manage all of the keys\n    // in a flat object\n    const row = rowsById[id]\n    const isSelected = row.isSelected\n    const shouldExist =\n      typeof setSelected !== 'undefined' ? setSelected : !isSelected\n\n    if (isSelected === shouldExist) {\n      return state\n    }\n\n    let newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (!row.isGrouped) {\n        if (!isSelected && shouldExist) {\n          newSelectedRowIds[id] = true\n        } else if (isSelected && !shouldExist) {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (selectSubRows && row.subRows) {\n        return row.subRows.forEach(row => handleRowById(row.id))\n      }\n    }\n\n    handleRowById(id)\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    getHooks,\n    plugins,\n    rowsById,\n    nonGroupedRowsById = rowsById,\n    autoResetSelectedRows = true,\n    state: { selectedRowIds },\n    selectSubRows = true,\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGroupBy', 'useSortBy'],\n    'useRowSelect'\n  )\n\n  const selectedFlatRows = React.useMemo(() => {\n    const selectedFlatRows = []\n\n    rows.forEach(row => {\n      const isSelected = selectSubRows\n        ? getRowIsSelected(row, selectedRowIds)\n        : !!selectedRowIds[row.id]\n      row.isSelected = !!isSelected\n      row.isSomeSelected = isSelected === null\n\n      if (isSelected) {\n        selectedFlatRows.push(row)\n      }\n    })\n\n    return selectedFlatRows\n  }, [rows, selectSubRows, selectedRowIds])\n\n  let isAllRowsSelected = Boolean(\n    Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length\n  )\n\n  if (isAllRowsSelected) {\n    if (Object.keys(nonGroupedRowsById).some(id => !selectedRowIds[id])) {\n      isAllRowsSelected = false\n    }\n  }\n\n  const getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSelectedRows()) {\n      dispatch({ type: actions.resetSelectedRows })\n    }\n  }, [dispatch, data])\n\n  const toggleAllRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleRowSelected = React.useCallback(\n    (id, value) => dispatch({ type: actions.toggleRowSelected, id, value }),\n    [dispatch]\n  )\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    selectedFlatRows,\n    isAllRowsSelected,\n    toggleRowSelected,\n    toggleAllRowsSelected,\n    getToggleAllRowsSelectedProps,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  row.toggleRowSelected = set => instance.toggleRowSelected(row.id, set)\n\n  row.getToggleRowSelectedProps = makePropGetter(\n    instance.getHooks().getToggleRowSelectedProps,\n    { instance: instance, row }\n  )\n}\n\nfunction getRowIsSelected(row, selectedRowIds) {\n  if (selectedRowIds[row.id]) {\n    return true\n  }\n\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (getRowIsSelected(subRow, selectedRowIds)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n    return allChildrenSelected ? true : someSelected ? null : false\n  }\n\n  return false\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst defaultInitialRowStateAccessor = originalRow => ({})\nconst defaultInitialCellStateAccessor = originalRow => ({})\n\n// Actions\nactions.setRowState = 'setRowState'\nactions.setCellState = 'setCellState'\nactions.resetRowState = 'resetRowState'\n\nexport const useRowState = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowState.pluginName = 'useRowState'\n\nfunction reducer(state, action, previousState, instance) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    rowsById,\n  } = instance\n\n  if (action.type === actions.init) {\n    return {\n      rowState: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetRowState) {\n    return {\n      ...state,\n      rowState: instance.initialState.rowState || {},\n    }\n  }\n\n  if (action.type === actions.setRowState) {\n    const { rowId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId].original)\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: functionalUpdate(value, oldRowState),\n      },\n    }\n  }\n\n  if (action.type === actions.setCellState) {\n    const { rowId, columnId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId].original)\n\n    const oldCellState =\n      typeof oldRowState?.cellState?.[columnId] !== 'undefined'\n        ? oldRowState.cellState[columnId]\n        : initialCellStateAccessor(rowsById[rowId].original)\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: {\n          ...oldRowState,\n          cellState: {\n            ...(oldRowState.cellState || {}),\n            [columnId]: functionalUpdate(value, oldCellState),\n          },\n        },\n      },\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const { autoResetRowState = true, data, dispatch } = instance\n\n  const setRowState = React.useCallback(\n    (rowId, value) =>\n      dispatch({\n        type: actions.setRowState,\n        rowId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const setCellState = React.useCallback(\n    (rowId, columnId, value) =>\n      dispatch({\n        type: actions.setCellState,\n        rowId,\n        columnId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const getAutoResetRowState = useGetLatest(autoResetRowState)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetRowState()) {\n      dispatch({ type: actions.resetRowState })\n    }\n  }, [data])\n\n  Object.assign(instance, {\n    setRowState,\n    setCellState,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    state: { rowState },\n  } = instance\n\n  if (row.original) {\n    row.state =\n      typeof rowState[row.id] !== 'undefined'\n        ? rowState[row.id]\n        : initialRowStateAccessor(row.original)\n\n    row.setState = updater => {\n      return instance.setRowState(row.id, updater)\n    }\n\n    row.cells.forEach(cell => {\n      if (!row.state.cellState) {\n        row.state.cellState = {}\n      }\n\n      cell.state =\n        typeof row.state.cellState[cell.column.id] !== 'undefined'\n          ? row.state.cellState[cell.column.id]\n          : initialCellStateAccessor(row.original)\n\n      cell.setState = updater => {\n        return instance.setCellState(row.id, cell.column.id, updater)\n      }\n    })\n  }\n}\n","import React from 'react'\n\nimport { functionalUpdate, actions } from '../publicUtils'\n\n// Actions\nactions.resetColumnOrder = 'resetColumnOrder'\nactions.setColumnOrder = 'setColumnOrder'\n\nexport const useColumnOrder = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => {\n    return [...deps, instance.state.columnOrder]\n  })\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnOrder.pluginName = 'useColumnOrder'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetColumnOrder) {\n    return {\n      ...state,\n      columnOrder: instance.initialState.columnOrder || [],\n    }\n  }\n\n  if (action.type === actions.setColumnOrder) {\n    return {\n      ...state,\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { columnOrder },\n    },\n  }\n) {\n  // If there is no order, return the normal columns\n  if (!columnOrder || !columnOrder.length) {\n    return columns\n  }\n\n  const columnOrderCopy = [...columnOrder]\n\n  // If there is an order, make a copy of the columns\n  const columnsCopy = [...columns]\n\n  // And make a new ordered array of the columns\n  const columnsInOrder = []\n\n  // Loop over the columns and place them in order into the new array\n  while (columnsCopy.length && columnOrderCopy.length) {\n    const targetColumnId = columnOrderCopy.shift()\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId)\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0])\n    }\n  }\n\n  // If there are any columns left, add them to the end\n  return [...columnsInOrder, ...columnsCopy]\n}\n\nfunction useInstance(instance) {\n  const { dispatch } = instance\n\n  instance.setColumnOrder = React.useCallback(\n    columnOrder => {\n      return dispatch({ type: actions.setColumnOrder, columnOrder })\n    },\n    [dispatch]\n  )\n}\n","import {\n  actions,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  ensurePluginOrder,\n} from '../publicUtils'\n\nimport { getFirstDefined } from '../utils'\n\n// Default Column\ndefaultColumn.canResize = true\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\n\nexport const useResizeColumns = hooks => {\n  hooks.getResizerProps = [defaultGetResizerProps]\n  hooks.getHeaderProps.push({\n    style: {\n      position: 'relative',\n    },\n  })\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n}\n\nconst defaultGetResizerProps = (props, { instance, header }) => {\n  const { dispatch } = instance\n\n  const onResizeStart = (e, header) => {\n    let isTouchEvent = false\n    if (e.type === 'touchstart') {\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n      if (e.touches && e.touches.length > 1) {\n        return\n      }\n      isTouchEvent = true\n    }\n    const headersToResize = getLeafHeaders(header)\n    const headerIdWidths = headersToResize.map(d => [d.id, d.totalWidth])\n\n    const clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX\n\n    const dispatchMove = clientXPos => {\n      dispatch({ type: actions.columnResizing, clientX: clientXPos })\n    }\n    const dispatchEnd = () => dispatch({ type: actions.columnDoneResizing })\n\n    const handlersAndEvents = {\n      mouse: {\n        moveEvent: 'mousemove',\n        moveHandler: e => dispatchMove(e.clientX),\n        upEvent: 'mouseup',\n        upHandler: e => {\n          document.removeEventListener(\n            'mousemove',\n            handlersAndEvents.mouse.moveHandler\n          )\n          document.removeEventListener(\n            'mouseup',\n            handlersAndEvents.mouse.upHandler\n          )\n          dispatchEnd()\n        },\n      },\n      touch: {\n        moveEvent: 'touchmove',\n        moveHandler: e => {\n          if (e.cancelable) {\n            e.preventDefault()\n            e.stopPropagation()\n          }\n          dispatchMove(e.touches[0].clientX)\n          return false\n        },\n        upEvent: 'touchend',\n        upHandler: e => {\n          document.removeEventListener(\n            handlersAndEvents.touch.moveEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          document.removeEventListener(\n            handlersAndEvents.touch.upEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          dispatchEnd()\n        },\n      },\n    }\n\n    const events = isTouchEvent\n      ? handlersAndEvents.touch\n      : handlersAndEvents.mouse\n    document.addEventListener(events.moveEvent, events.moveHandler, {\n      passive: false,\n    })\n    document.addEventListener(events.upEvent, events.upHandler, {\n      passive: false,\n    })\n\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      columnWidth: header.totalWidth,\n      headerIdWidths,\n      clientX,\n    })\n  }\n\n  return [\n    props,\n    {\n      onMouseDown: e => e.persist() || onResizeStart(e, header),\n      onTouchStart: e => e.persist() || onResizeStart(e, header),\n      style: {\n        cursor: 'ew-resize',\n      },\n      draggable: false,\n      role: 'separator',\n    },\n  ]\n}\n\nuseResizeColumns.pluginName = 'useResizeColumns'\n\nfunction reducer(state, action) {\n  if (action.type === actions.init) {\n    return {\n      columnResizing: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { clientX, columnId, columnWidth, headerIdWidths } = action\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: clientX,\n        headerIdWidths,\n        columnWidth,\n        isResizingColumn: columnId,\n      },\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX, columnWidth, headerIdWidths } = state.columnResizing\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.max(\n        headerWidth + headerWidth * percentageDeltaX,\n        0\n      )\n    })\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        columnWidths: {\n          ...state.columnResizing.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: null,\n        isResizingColumn: null,\n      },\n    }\n  }\n}\n\nconst useInstanceBeforeDimensions = instance => {\n  const {\n    flatHeaders,\n    disableResizing,\n    getHooks,\n    state: { columnResizing },\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  flatHeaders.forEach(header => {\n    const canResize = getFirstDefined(\n      header.disableResizing === true ? false : undefined,\n      disableResizing === true ? false : undefined,\n      true\n    )\n\n    header.canResize = canResize\n    header.width = columnResizing.columnWidths[header.id] || header.width\n    header.isResizing = columnResizing.isResizingColumn === header.id\n\n    if (canResize) {\n      header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\n        instance: getInstance(),\n        header,\n      })\n    }\n  })\n}\n\nfunction useInstance({ plugins }) {\n  ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns')\n}\n\nfunction getLeafHeaders(header) {\n  const leafHeaders = []\n  const recurseHeader = header => {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader)\n    }\n    leafHeaders.push(header)\n  }\n  recurseHeader(header)\n  return leafHeaders\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar Table = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      striped = _ref.striped,\n      bordered = _ref.bordered,\n      borderless = _ref.borderless,\n      hover = _ref.hover,\n      size = _ref.size,\n      variant = _ref.variant,\n      responsive = _ref.responsive,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"striped\", \"bordered\", \"borderless\", \"hover\", \"size\", \"variant\", \"responsive\"]);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  var classes = classNames(className, decoratedBsPrefix, variant && decoratedBsPrefix + \"-\" + variant, size && decoratedBsPrefix + \"-\" + size, striped && decoratedBsPrefix + \"-striped\", bordered && decoratedBsPrefix + \"-bordered\", borderless && decoratedBsPrefix + \"-borderless\", hover && decoratedBsPrefix + \"-hover\");\n  var table = React.createElement(\"table\", _extends({}, props, {\n    className: classes,\n    ref: ref\n  }));\n\n  if (responsive) {\n    var responsiveClass = decoratedBsPrefix + \"-responsive\";\n\n    if (typeof responsive === 'string') {\n      responsiveClass = responsiveClass + \"-\" + responsive;\n    }\n\n    return React.createElement(\"div\", {\n      className: responsiveClass\n    }, table);\n  }\n\n  return table;\n});\nexport default Table;"],"sourceRoot":""}